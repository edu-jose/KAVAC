/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8000/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@mdi/font/scss/materialdesignicons.scss":
/*!**************************************************************!*\
  !*** ./node_modules/@mdi/font/scss/materialdesignicons.scss ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1kaS9mb250L3Njc3MvbWF0ZXJpYWxkZXNpZ25pY29ucy5zY3NzPzk1NzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1kaS9mb250L3Njc3MvbWF0ZXJpYWxkZXNpZ25pY29ucy5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mdi/font/scss/materialdesignicons.scss\n");

/***/ }),

/***/ "./resources/js/custom.js":
/*!********************************!*\
  !*** ./resources/js/custom.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** Corrige el uso del campo de búsqueda en elementos select2 en ventanas modales con el uso de bootstrap 4 */\n$.fn.modal.Constructor.prototype._enforceFocus = function () {};\n\n/** Instrucciones a ejecutar una vez se haya cargado la página */\n$(document).ready(function () {\n  /** Tooltip para opciones de la barra de navegación superior */\n  $('.dropdown-toggle').tooltip({\n    delay: {\n      hide: 100\n    }\n  });\n  $('.dropdown-toggle').on('click', function () {\n    $('.tooltip:last').remove();\n    $(this).tooltip({\n      delay: {\n        hide: 100\n      }\n    });\n  });\n  $('.dropdown-toggle').on('shown.bs.tooltip', function () {\n    setTimeout(function () {\n      $('.dropdown-toggle').tooltip('hide');\n    }, 1500);\n  });\n\n  /** Maximizar / minimizar panel de menú izquierdo */\n  $('.menu-collapse').click(function () {\n    if (!$('body').hasClass('hidden-left')) {\n      if ($('.container-left').hasClass('collapsed')) {\n        $('.container-left, .content-wrapper').removeClass('collapsed');\n        $(this).find('i').removeClass('arrows-1_minimal-right');\n        $(this).find('i').addClass('arrows-1_minimal-left');\n        $('.menu-option').removeClass('text-center');\n        $('.menu-option a i').removeClass('fa-2x');\n        $('.menu-option a span').show(\"slow\");\n        $('.menu-collapse').attr(\"data-original-title\", \"Minimizar panel de menú\");\n      } else {\n        $('.container-left, .content-wrapper').addClass('collapsed');\n        $(this).find('i').removeClass('arrows-1_minimal-left');\n        $(this).find('i').addClass('arrows-1_minimal-right');\n        $('.children').hide(\"slow\"); // hide sub-menu if leave open\n        $('.menu-option').addClass('text-center');\n        $('.menu-option a i').addClass('fa-2x');\n        $('.menu-option a span').hide(\"slow\");\n        $('.menu-collapse').attr(\"data-original-title\", \"Maximizar panel de menú\");\n      }\n      $('.menu-collapse').tooltip();\n      setTimeout(function () {\n        $('.menu-collapse').tooltip('hide');\n      }, 2000);\n    } else {\n      if (!$('body').hasClass('show-left')) {\n        $('body').addClass('show-left');\n      } else {\n        $('body').removeClass('show-left');\n      }\n    }\n    return false;\n  });\n  if ($('select').length) {\n    /** Implementación del plugin selec2 para los elementos del DOM de tipo Select */\n    $('select:not([id^=\"VueTables__limit_\"])').select2({});\n    $('.select2').attr({\n      'title': 'Seleccione un registro de la lista',\n      'data-toggle': 'tooltip'\n    });\n    $('.select2').tooltip({\n      delay: {\n        hide: 100\n      }\n    });\n    $('.select2').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.select2').tooltip('hide');\n      }, 1500);\n    });\n  }\n\n  /*$('.card-header').hover(function() {\n      $(this).find('.card-btns').fadeIn('fast');\n  }, function() {\n      $(this).find('.card-btns').fadeOut('fast');\n  });*/\n\n  // Close card\n  $('.card .card-close').click(function () {\n    $(this).closest('.card').fadeOut(200);\n    return false;\n  });\n\n  // Minimize Panel\n  $('.card .card-minimize').click(function () {\n    var el = $(this);\n    var p = el.closest('.card');\n    $('.tooltip:last').remove();\n    if (!$(this).hasClass('maximize')) {\n      p.find('hr').addClass('nodisplay');\n      p.find('.card-body, .card-footer').fadeOut('fast');\n      el.addClass('maximize');\n      el.find('i').removeClass('arrows-1_minimal-up').addClass('arrows-1_minimal-down');\n      el.attr('data-original-title', 'Maximize Panel').tooltip({\n        delay: {\n          hide: 100\n        }\n      });\n    } else {\n      p.find('hr').removeClass('nodisplay');\n      p.find('.card-body, .card-footer').fadeIn('fast');\n      el.removeClass('maximize');\n      el.find('i').removeClass('arrows-1_minimal-down').addClass('arrows-1_minimal-up');\n      el.attr('data-original-title', 'Minimize Panel').tooltip({\n        delay: {\n          hide: 100\n        }\n      });\n    }\n    el.on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        el.tooltip('hide');\n      }, 1500);\n    });\n    return false;\n  });\n\n  /** Maximinizar / Minimizar secciones */\n  if ($(\".btn-collapse\").length) {\n    $(\".btn-collapse\").on(\"click\", function () {\n      if ($(this).hasClass('collapsed')) {\n        $(this).find(\"i\").removeClass('arrows-1_minimal-down');\n        $(this).find(\"i\").addClass('arrows-1_minimal-up');\n      } else {\n        $(this).find(\"i\").removeClass('arrows-1_minimal-up');\n        $(this).find(\"i\").addClass('arrows-1_minimal-down');\n      }\n    });\n    $(\".btn-collapse\").tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n    $('.btn-collapse').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.close').tooltip('hide');\n      }, 1500);\n    });\n  }\n\n  /** Implementación de sliders sencillos */\n  if ($('#sliderRegular').length) {\n    /** @type {Object} [Estilos personalizados para el uso de esliders] */\n    var slider = document.getElementById('sliderRegular');\n    noUiSlider.create(slider, {\n      start: 40,\n      connect: [true, false],\n      range: {\n        min: 0,\n        max: 100\n      }\n    });\n  }\n\n  /** Implementación de sliders dobles */\n  if ($('#sliderDouble').length) {\n    var slider2 = document.getElementById('sliderDouble');\n    noUiSlider.create(slider2, {\n      start: [20, 60],\n      connect: true,\n      range: {\n        min: 0,\n        max: 100\n      }\n    });\n  }\n\n  /** Tooltips personalizados */\n  if ($('.close').length) {\n    $('.close').attr({\n      'title': 'Presione para cerrar la ventana',\n      'data-toggle': 'tooltip',\n      'data-placement': 'left'\n    });\n    $('.close').tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n    $('.close').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.close').tooltip('hide');\n      }, 1500);\n    });\n  }\n  if ($('.btn-modal-close').length) {\n    $('.btn-modal-close').attr({\n      'title': 'Presione para cerrar la ventana',\n      'data-toggle': 'tooltip'\n    });\n    $('.btn-modal-close').tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n    $('.btn-modal-close').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.btn-modal-close').tooltip('hide');\n      }, 1500);\n    });\n  }\n  if ($('.btn-modal-clear').length) {\n    $('.btn-modal-clear').attr({\n      'title': 'Presione para reestablecer los campos del formulario',\n      'data-toggle': 'tooltip'\n    });\n    $('.btn-modal-clear').tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n    $('.btn-modal-clear').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.btn-modal-clear').tooltip('hide');\n      }, 1500);\n    });\n  }\n  if ($('.btn-modal-save').length) {\n    $('.btn-modal-save').attr({\n      'title': 'Presione para guardar el registro',\n      'data-toggle': 'tooltip'\n    });\n    $('.btn-modal-save').tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n    $('.btn-modal-save').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.btn-modal-save').tooltip('hide');\n      }, 1500);\n    });\n  }\n  if ($('.btn-add-record').length) {\n    $('.btn-add-record').attr({\n      'title': 'Agregar un nuevo registro',\n      'data-toggle': 'tooltip'\n    });\n    $('.btn-add-record').tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n    $('.btn-add-record').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.btn-add-record').tooltip('hide');\n      }, 1500);\n    });\n  }\n  if ($('.btn-tooltip').length) {\n    $('.btn-tooltip').tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n    $('.btn-tooltip').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.btn-tooltip').tooltip('hide');\n      }, 1500);\n    });\n  }\n  if ($('.btn-file').length) {\n    $('.btn-file').attr({\n      'title': 'Seleccione un archivo a cargar',\n      'data-toggle': 'tooltip'\n    });\n    $('.btn-file').tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n    $('.btn-file').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.btn-file').tooltip('hide');\n      }, 1500);\n    });\n  }\n\n  /** Reemplazo de icono indicador en el menú del panel izquierdo */\n  $('.submenu-indicator').html('<i class=\"ion-ios-arrow-left text-center text-info\"></i>');\n\n  /** Acciones para ocultar los mensajes tooltip cuando se posiciona o se hace clic en otro elemento */\n  $('a').on('hover, click', function () {\n    $('.tooltip:last').remove();\n    $('.tooltip:last').tooltip({\n      trigger: \"hover\",\n      delay: {\n        hide: 100\n      }\n    });\n  });\n\n  /** Formularios */\n  $('form').each(function () {\n    if ($(this).find('.is-required').length) {\n      $(this).find('.card-body').prepend(\"<div class='row' style='margin:10px 0'>\" + \"<div class='col-12 form-group'>\" + \"<span class='text-muted'>\" + \"Los campos con <span class='text-required'>*</span> son obligatorios\" + \"</span>\" + \"</div>\" + \"</div>\");\n    }\n  });\n\n  /** Campos del tipo Fecha */\n  if ($('input[type=date]').length) {\n    var restrictDateByFiscalYear = function restrictDateByFiscalYear() {\n      if ($('input[type=date]').hasClass('fiscal-year-restrict')) {\n        var _today = new Date();\n        var _dd = _today.getDate();\n        var _mm = _today.getMonth() + 1;\n        var _yyyy = _today.getFullYear();\n        if (_dd < 10) {\n          _dd = '0' + _dd;\n        }\n        if (_mm < 10) {\n          _mm = '0' + _mm;\n        }\n        if (_yyyy > window.execution_year) {\n          _dd = 31;\n          _mm = 12;\n          _yyyy = window.execution_year;\n        }\n        var _now = \"\".concat(_yyyy, \"-\").concat(_mm, \"-\").concat(_dd);\n        $('input[type=date]').attr('max', _now);\n      }\n    };\n    !$('input[type=date]').on('keydown', function () {\n      return false;\n    });\n    /** Establece la fecha límite a seleccionar si no esta presente la clase no-restrict */\n    if (!$('input[type=date]').hasClass('no-restrict') && !$('input[type=date]').hasClass('fiscal-year-restrict')) {\n      var today = new Date();\n      var dd = today.getDate();\n      var mm = today.getMonth() + 1;\n      var yyyy = today.getFullYear();\n      if (dd < 10) {\n        dd = '0' + dd;\n      }\n      if (mm < 10) {\n        mm = '0' + mm;\n      }\n      var now = \"\".concat(yyyy, \"-\").concat(mm, \"-\").concat(dd);\n      $('input[type=date]').attr('max', now);\n    }\n    var timeOpen = setTimeout(restrictDateByFiscalYear, 2000);\n  }\n  if ($('.datatable').length) {\n    /** Configuración de atributos para tablas con datatable */\n    $.extend($.fn.dataTableExt.oStdClasses, {\n      \"sFilterInput\": \"form-control input-sm\",\n      \"sLengthSelect\": \"input-sm select2\"\n    });\n    dt_options = {\n      \"dom\": '<\"row\"<\"col-sm-6\"f><\"col-sm-6\"l>>tip',\n      \"language\": {\n        //\"url\": \"http://cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/Spanish.json\",\n        \"processing\": \"Procesando...\",\n        \"lengthMenu\": \"Mostrar _MENU_ registros\",\n        \"zeroRecords\": \"Lo sentimos - no existen registros\",\n        \"infoEmpty\": \"No hay registros disponibles\",\n        \"emptyTable\": \"Ningún dato disponible en esta tabla\",\n        \"info\": \"Página _PAGE_ de _PAGES_\",\n        \"search\": \"Buscar:\",\n        \"paginate\": {\n          \"first\": \"Primero\",\n          \"last\": \"Último\",\n          \"next\": \"Siguiente\",\n          \"previous\": \"Anterior\"\n        },\n        \"loadingRecords\": \"Cargando...\",\n        \"infoThousands\": \",\",\n        \"infoFiltered\": \"(filtrado de un total de _MAX_ registros)\",\n        \"infoPostFix\": \"\",\n        \"aria\": {\n          \"sortAscending\": \": Activar para ordenar la columna de manera ascendente\",\n          \"sortDescending\": \": Activar para ordenar la columna de manera descendente\"\n        }\n      },\n      \"ordering\": true,\n      \"order\": [[0, 'asc']],\n      \"bDestroy\": true,\n      \"bPaginate\": true,\n      \"bInfo\": true,\n      \"bAutoWidth\": false,\n      \"initComplete\": function initComplete(settings, json) {\n        $('div.dataTables_wrapper div.dataTables_filter').css('text-align', 'left');\n        $('div.dataTables_wrapper div.dataTables_length').css('text-align', 'right');\n        $('.dataTables_length select').select2();\n      }\n    };\n    $('.datatable').dataTable(dt_options);\n    $('.dataTables_length .selection').attr({\n      'title': 'Seleccione la cantidad de registros a mostrar por cada página',\n      'data-toggle': 'tooltip'\n    });\n    $('.dataTables_length .selection').tooltip({\n      delay: {\n        hide: 100\n      }\n    });\n    $('.dataTables_length .selection').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.dataTables_length .selection').tooltip('hide');\n      }, 1500);\n    });\n    $('.dataTables_filter input').attr({\n      'title': 'Indique los datos del registro a buscar',\n      'data-toggle': 'tooltip'\n    });\n    $('.dataTables_filter input').tooltip({\n      delay: {\n        hide: 100\n      }\n    });\n    $('.dataTables_filter input').on('shown.bs.tooltip', function () {\n      setTimeout(function () {\n        $('.dataTables_filter input').tooltip('hide');\n      }, 1500);\n    });\n    $('.modal').on('hidden.bs.modal', function () {\n      $(\"input[class^='VueTables__search']\").val('');\n    });\n  }\n\n  /** Gestiona elementos de tablas VueTables */\n  if ($('.VueTables__search__input').length > 0 && !$('.VueTables__search__input').hasClass('input-sm')) {\n    $('.VueTables__search__input').addClass('input-sm');\n  }\n\n  /** Evento que permite mostrar datos sobre la aplicación (acerca de) */\n  $('.about_app').on('click', function (e) {\n    e.preventDefault();\n    var d = new Date();\n    var appInfo = new AppInfo([{\n      name: 'Roldan Vargas',\n      email: '<a href=\"mailto:rvargas@cenditel.gob.ve\">rvargas@cenditel.gob.ve</a> | ' + '<a href=\"mailto:roldandvg@gmail.com\">roldandvg@gmail.com</a>',\n      group: \"Lider de proyecto / Dise\\xF1o / Desarrollo / Autor / Director de Desarrollo (2021 - \".concat(d.getFullYear(), \")\")\n    }, {\n      name: 'Cipriano Alvarado',\n      email: '<a href=\"mailto:calvarado@cenditel.gob.ve\">calvarado@cenditel.gob.ve</a>',\n      group: 'Diseñadores'\n    }, {\n      name: 'Jessica Ferreira',\n      email: '<a href=\"mailto:jferreira@cenditel.gob.ve\">jferreira@cenditel.gob.ve</a>',\n      group: 'Diseñadores'\n    }, {\n      name: 'Julie Vera',\n      email: '<a href=\"mailto:jvera@cenditel.gob.ve\">jvera@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'María González',\n      email: '<a href=\"mailto:mgonzalez@cenditel.gob.ve\">mgonzalez@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'María Rujano',\n      email: '<a href=\"mailto:mrujano@cenditel.gob.ve\">mrujano@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'Mariangel Molero',\n      email: '<a href=\"mailto:mmolero@cenditel.gob.ve\">mmolero@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'Francisco Berbesí',\n      email: '<a href=\"mailto:fberbesi@cenditel.gob.ve\">fberbesi@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'Hyildayra Colmenares',\n      email: '<a href=\"mailto:hcolmenares@cenditel.gob.ve\">hcolmenares@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'Kleivymar Montilla',\n      email: '<a href=\"mailto:kmontilla@cenditel.gob.ve\">kmontilla@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'Alberto Gil',\n      email: '<a href=\"mailto:agil@cenditel.gob.ve\">argil@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'María Morales',\n      email: '<a href=\"mailto:mmorales@cenditel.gob.ve\">mmorales@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'Dianicth Monsalve',\n      email: '<a href=\"mailto:dsmonsalve@cenditel.gob.ve\">dsmonsalve@cenditel.gob.ve</a>',\n      group: 'Analistas'\n    }, {\n      name: 'Luis Ramírez',\n      email: '<a href=\"mailto:lramirez@cenditel.gob.ve\">lramirez@cenditel.gob.ve</a>',\n      group: 'Manuales'\n    }, {\n      name: 'Marilyn Caballero',\n      email: '<a href=\"mailto:mcaballero@cenditel.gob.ve\">mcaballero@cenditel.gob.ve</a>',\n      group: 'Manuales'\n    }, {\n      name: 'William Páez',\n      email: '<a href=\"mailto:wpaez@cenditel.gob.ve\">wpaez@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Henry Paredes',\n      email: '<a href=\"mailto:hparedes@cenditel.gob.ve\">hparedes@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Juan Rosas',\n      email: '<a href=\"mailto:jrosas@cenditel.gob.ve\">jrosas@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Yennifer Ramírez',\n      email: '<a href=\"mailto:yramirez@cenditel.gob.ve\">yramirez@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Pedro Buitrago',\n      email: '<a href=\"mailto:pbuitrago@cenditel.gob.ve\">pbuitrago@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Argenis Osorio',\n      email: '<a href=\"mailto:adosorio@cenditel.gob.ve\">aosorio@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Angelo Osorio',\n      email: '<a href=\"mailto:adosorio@cenditel.gob.ve\">adosorio@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Daniel Contreras',\n      email: '<a href=\"mailto:dcontreras@cenditel.gob.ve\">dcontreras@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Miguel Narváez',\n      email: '<a href=\"mailto:mnarvaez@cenditel.gob.ve\">mnarvaez@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Francisco Ruiz',\n      email: '<a href=\"mailto:fruiz@cenditel.gob.ve\">fruiz@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Francisco Escala',\n      email: '<a href=\"mailto:fescala@cenditel.gob.ve\">fescala@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      email: '<a href=\"mailto:fescala@cenditel.gob.ve\">fescala@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'José Briceño',\n      email: '<a href=\"mailto:jbriceno@cenditel.gob.ve\">jbriceno@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Fabian Palmera',\n      email: '<a href=\"mailto:fpalmera@cenditel.gob.ve\">fpalmera@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Manuel Zambrano',\n      email: '<a href=\"mailto:mzambrano@cenditel.gob.ve\">mzambrano@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'José Puentes',\n      email: '<a href=\"mailto:jpuentes@cenditel.gob.ve\">jpuentes@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Juan Vizcarrondo',\n      email: '<a href=\"mailto:jvizcarrondo@cenditel.gob.ve\">jvizcarrondo@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Oscar J. González',\n      email: '<a href=\"mailto:ogonzalez@cenditel.gob.ve\">ojgonzalez@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Pedro Contreras',\n      email: '<a href=\"mailto:pmcontreras@cenditel.gob.ve\">pmcontreras@cenditel.gob.ve</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Marco Ocanto - CNTI',\n      email: '<a href=\"mailto:sanchezmarco8882@gmail.com\">sanchezmarco8882@gmail.com</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Jonathan Alvarado - CNTI',\n      email: '<a href=\"mailto:jonathanalvarado1407@gmail.com\">jonathanalvarado1407@gmail.com</a>',\n      group: 'Desarrolladores'\n    }, {\n      name: 'Laura Colina',\n      email: '<a href=\"mailto:lcolina@cenditel.gob.ve\">lcolina@cenditel.gob.ve</a>',\n      group: 'Director(a) de Desarrollo (2020)'\n    }, {\n      name: 'Argenis Osorio',\n      email: '<a href=\"mailto:adosorio@cenditel.gob.ve\">aosorio@cenditel.gob.ve</a>',\n      group: 'Director de Desarrollo (2018-2019)'\n    }, {\n      name: 'Santiago Roca',\n      email: '<a href=\"mailto:sroca@cenditel.gob.ve\">sroca@cenditel.gob.ve</a>',\n      group: 'Colaborador'\n    }]);\n    bootbox.alert({\n      className: 'modal-credits',\n      closeButton: false,\n      message: appInfo.showAbout(),\n      buttons: {\n        ok: {\n          label: \"OK\",\n          className: 'btn-primary'\n        }\n      }\n    });\n    $('.bootbox.modal [data-bb-handler=\"ok\"]').attr('title', 'Haga clic para cerrar esta ventana');\n    $('.bootbox.modal [data-bb-handler=\"ok\"]').attr('data-toggle', 'tooltip');\n    $('.bootbox.modal [data-bb-handler=\"ok\"]').tooltip();\n    $('.bootbox.modal a').tooltip();\n  });\n\n  /** Evento que permite mostrar datos sobre el licenciamiento de la aplicación */\n  $('.license_app').on('click', function (e) {\n    e.preventDefault();\n    var appInfo = new AppInfo([{\n      name: 'Roldan Vargas'\n    }, {\n      name: 'Cipriano Alvarado'\n    }, {\n      name: 'Jessica Ferreira'\n    }, {\n      name: 'Julie Vera'\n    }, {\n      name: 'María González'\n    }, {\n      name: 'María Rujano'\n    }, {\n      name: 'Mariangel Molero'\n    }, {\n      name: 'Francisco Berbesí'\n    }, {\n      name: 'Luis Ramírez'\n    }, {\n      name: 'Hyildayra Colmenares'\n    }, {\n      name: 'Kleivymar Montilla'\n    }, {\n      name: 'Alberto Gil'\n    }, {\n      name: 'María Morales'\n    }, {\n      name: 'Dianicth Monsalve'\n    }, {\n      name: 'Marilyn Caballero'\n    }, {\n      name: 'William Páez'\n    }, {\n      name: 'Henry Paredes'\n    }, {\n      name: 'Juan Rosas'\n    }, {\n      name: 'Yennifer Ramírez'\n    }, {\n      name: 'Pedro Buitrago'\n    }, {\n      name: 'Argenis Osorio'\n    }, {\n      name: 'Angelo Osorio'\n    }, {\n      name: 'Daniel Contreras'\n    }, {\n      name: 'Laura Colina'\n    }, {\n      name: 'Santiago Roca'\n    }, {\n      name: 'José Puentes'\n    }, {\n      name: 'Juan Vizcarrondo'\n    }, {\n      name: 'Fabian Palmera'\n    }, {\n      name: 'Manuel Zambrano'\n    }, {\n      name: 'Oscar J. González'\n    }, {\n      name: 'Pedro Contreras'\n    }, {\n      name: 'Miguel Narváez'\n    }, {\n      name: 'Marco Ocanto'\n    }, {\n      name: 'Jonathan Alvarado'\n    }, {\n      name: 'Francisco Ruíz'\n    }, {\n      name: 'Francisco Escala'\n    }, {\n      name: 'José Briceño'\n    }]);\n    bootbox.alert({\n      className: 'modal-credits',\n      closeButton: false,\n      message: appInfo.showLicense()\n    });\n    $('.bootbox.modal [data-bb-handler=\"ok\"]').attr('title', 'Haga clic para cerrar esta ventana');\n    $('.bootbox.modal [data-bb-handler=\"ok\"]').attr('data-toggle', 'tooltip');\n    $('.bootbox.modal [data-bb-handler=\"ok\"]').tooltip();\n    $('.bootbox.modal a').tooltip();\n  });\n\n  /** Oculta el tooltip de los elementos bootstrap switch después de unos segundos */\n  $('.bootstrap-switch').on('shown.bs.tooltip', function () {\n    setTimeout(function () {\n      $('.bootstrap-switch').tooltip('hide');\n    }, 1500);\n  });\n\n  /**\n   * Función que realiza la verificación de la frase de paso del certificado\n   * p12 guardado en el modulo de Firma electrónica.\n   *\n   * @author Ing. Angelo Osorio  <adosorio@cenditel.gob.ve> | <adosorio@gmail.com>\n   */\n  $('#verify-modal').click(function () {\n    var data = {\n      'passphrase': $('#phasepass-modal').val()\n    };\n    axios.post('/digitalsignature/validateAuthApi', data).then(function (response) {\n      if (response.data.auth === true) {\n        $('#signed-modal').removeClass('d-none');\n        $('#authentication').addClass('d-none');\n      } else {\n        $('#authentication').removeClass('d-none');\n        $('#signed-modal').addClass('d-none');\n      }\n    })[\"catch\"](function (error) {\n      if (typeof error.response != \"undefined\") {\n        for (var index in error.response.data.errors) {\n          if (error.response.data.errors[index]) {\n            vm.errors.push(error.response.data.errors[index][0]);\n          }\n        }\n      }\n    });\n  });\n\n  /**\n   * Función que define el atributo href para dirigir a la documentación \n   * de usuario según la ubicación en el sistema\n   *\n   * @author Luis Ramírez  <lgramirez@cenditel.gob.ve>\n   */\n  $('#list_options_user').on('click', function () {\n    var link = document.getElementById('doc-user');\n    var path = window.location.pathname.split('/');\n    var location = path[1];\n    var module;\n    if (modules) {\n      modules.forEach(function (element) {\n        if (location === element.toLowerCase()) {\n          module = element.toLowerCase();\n          return module;\n        }\n      });\n      if (module) {\n        link.href = \"\".concat(app_url) + '/docs/user' + '_' + \"\".concat(module) + '/';\n      } else {\n        link.href = \"\".concat(app_url) + '/docs/user/';\n      }\n    } else {\n      link.href = \"\".concat(app_url) + '/docs/user/';\n    }\n  });\n});\n\n/**\n * Permite mostrar alerta de mensajes de acciones realizadas con vue o js\n *\n * @author Ing. Roldan Vargas  <rvargas@cenditel.gob.ve> | <roldandvg@gmail.com>\n * @param  {string} msg_title  Título de la ventana de alerta\n * @param  {string} msg_class  Clase de estilo a usar en la ventana de alerta\n * @param  {string} msg_icon   Ícono a usar en la ventana de alerta\n * @param  {string} msg_custom Mensaje personalizado\n * @param  {string} type       Tipo de mensaje a mostrar (store|update|destroy)\n */\nfunction gritter_messages(msg_title, msg_class, msg_icon, type, msg_custom) {\n  msg_title = !msg_title ? 'Éxito' : msg_title;\n  msg_class = !msg_class ? 'growl-success' : 'glowl-' + msg_class;\n  msg_icon = !msg_icon ? 'screen-ok' : msg_icon;\n  var msg_text = !msg_custom ? '' : msg_custom;\n  if (type == 'store') {\n    msg_text = 'Registro almacenado con éxito';\n  } else if (type == 'update') {\n    msg_text = 'Registro actualizado con éxito';\n  } else if (type == 'destroy') {\n    msg_text = 'Registro eliminado con éxito';\n  } else if (type === 'load') {\n    msg_text = 'Los datos fueron cargados correctamente';\n  }\n  $.gritter.add({\n    title: msg_title,\n    text: msg_text,\n    class_name: msg_class,\n    image: \"/images/\" + msg_icon + \".png\",\n    sticky: false,\n    time: ''\n  });\n}\n\n/*\n * Función que permite eliminar registros mediante ajax\n * @author Ing. Roldan Vargas <rvargas@cenditel.gob.ve> | <roldandvg@gmail.com>\n * @param {string} url URL del controlador que realiza la acción de eliminación\n * @return Un mensaje al usuario solicitando confirmación de la eliminación del registro\n */\nfunction delete_record(url) {\n  bootbox.confirm('Esta seguro de querer eliminar este registro?', function (result) {\n    if (result) {\n      /** Ajax config csrf token */\n      $.ajaxSetup({\n        headers: {\n          'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n        }\n      });\n      /** Ajax delete record */\n      $.ajax({\n        type: 'DELETE',\n        cache: false,\n        dataType: 'JSON',\n        url: url,\n        data: {},\n        success: function success(data) {\n          if (data.result) {\n            location.reload();\n          }\n        },\n        error: function error(jqxhr, textStatus, _error) {\n          var err = textStatus + \", \" + _error;\n          bootbox.alert('Error interno del servidor al eliminar el registro.');\n          logs('resources/js/custom.js', 406, \"Error con la petici\\xF3n solicitada. Detalles: \".concat(err), 'delete_record');\n        }\n      });\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/custom.js\n");

/***/ }),

/***/ "./resources/js/jquery-menu.js":
/*!*************************************!*\
  !*** ./resources/js/jquery-menu.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jQuery(document).ready(function () {\n  jQuery(\"#jquery-accordion-menu\").jqueryAccordionMenu();\n  jQuery(\".colors a\").click(function () {\n    if ($(this).attr(\"class\") != \"default\") {\n      $(\"#jquery-accordion-menu\").removeClass();\n      $(\"#jquery-accordion-menu\").addClass(\"jquery-accordion-menu\").addClass($(this).attr(\"class\"));\n    } else {\n      $(\"#jquery-accordion-menu\").removeClass();\n      $(\"#jquery-accordion-menu\").addClass(\"jquery-accordion-menu\");\n    }\n  });\n});\neval(function (p, a, c, k, e, d) {\n  e = function e(c) {\n    return c;\n  };\n  if (!''.replace(/^/, String)) {\n    while (c--) {\n      d[c] = k[c] || c;\n    }\n    k = [function (e) {\n      return d[e];\n    }];\n    e = function e() {\n      return '\\\\w+';\n    };\n    c = 1;\n  }\n  ;\n  while (c--) {\n    if (k[c]) {\n      p = p.replace(new RegExp('\\\\b' + e(c) + '\\\\b', 'g'), k[c]);\n    }\n  }\n  return p;\n}('94(61(54,52,50,53,51,55){51=61(50){64(50<52?\\'\\':51(95(50/52)))+((50=50%52)>35?68.98(50+29):50.97(36))};73(!\\'\\'.70(/^/,68)){71(50--){55[51(50)]=53[50]||51(50)}53=[61(51){64 55[51]}];51=61(){64\\'\\\\\\\\59+\\'};50=1};71(50--){73(53[50]){54=54.70(109 96(\\'\\\\\\\\56\\'+51(50)+\\'\\\\\\\\56\\',\\'57\\'),53[50])}}64 54}(\\'86(31(54,52,50,53,51,55){51=31(50){32(50<52?\\\\\\'\\\\\\':51(91(50/52)))+((50=50%52)>35?34.39(50+29):50.84(36))};38(!\\\\\\'\\\\\\'.37(/^/,34)){33(50--){55[51(50)]=53[50]||51(50)}53=[31(51){32 55[51]}];51=31(){32\\\\\\'\\\\\\\\\\\\\\\\59+\\\\\\'};50=1};33(50--){38(53[50]){54=54.37(125 83(\\\\\\'\\\\\\\\\\\\\\\\56\\\\\\'+51(50)+\\\\\\'\\\\\\\\\\\\\\\\56\\\\\\',\\\\\\'57\\\\\\'),53[50])}}32 54}(\\\\\\'219(63(54,52,50,53,51,55){51=63(50){60(50<52?\\\\\\\\\\\\\\'\\\\\\\\\\\\\\':51(220(50/52)))+((50=50%52)>218?99.217(50+29):50.22(21))};74(!\\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.101(/^/,99)){102(50--){55[51(50)]=53[50]||51(50)}53=[63(51){60 55[51]}];51=63(){60\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\59+\\\\\\\\\\\\\\'};50=1};102(50--){74(53[50]){54=54.101(89 20(\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\56\\\\\\\\\\\\\\'+51(50)+\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\56\\\\\\\\\\\\\\',\\\\\\\\\\\\\\'57\\\\\\\\\\\\\\'),53[50])}}60 54}(\\\\\\\\\\\\\\';(7($,77,104,13){81 57=\"12\";81 6={66:11,100:0,119:0,118:93,88:93};7 76(9,67){1.9=9;1.221=$.103({},6,67);1.10=6;1.14=57;1.87()};$.103(76.15,{87:7(){1.92();1.106();8(6.88){1.59()}},92:7(){$(1.9).5(\"225\").58(\"19\").113(\"112 111\",7(51){51.18();51.16();8($(1).5(\".3\").54>0){8($(1).5(\".3\").80(\"17\")==\"223\"){$(1).5(\".3\").116(6.100).213(6.66);$(1).5(\".3\").56(\"52\").115(\"3-50-65\");8(6.118){$(1).56().5(\".3\").120(6.66);$(1).56().5(\".3\").56(\"52\").72(\"3-50-65\")}117 202}203{$(1).5(\".3\").116(6.119).120(6.66)}8($(1).5(\".3\").56(\"52\").199(\"3-50-65\")){$(1).5(\".3\").56(\"52\").72(\"3-50-65\")}}77.205.108=$(1).5(\"52\").210(\"108\")})},106:7(){8($(1.9).58(\".3\").54>0){$(1.9).58(\".3\").56(\"52\").206(\"<53 124=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'3-50\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'>+</53>\")}},59:7(){81 4,55,79,75;$(1.9).58(\"52\").113(\"112 111\",7(51){$(\".4\").248();8($(1).5(\".4\").54===0){$(1).250(\"<53 124=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'4\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'></53>\")}4=$(1).58(\".4\");4.72(\"121-4\");8(!4.78()&&!4.69()){55=262.260($(1).259(),$(1).257());4.80({78:55,69:55})}79=51.247-$(1).110().107-4.69()/2;75=51.237-$(1).110().105-4.78()/2;4.80({105:75+\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'114\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',107:79+\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'114\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}).115(\"121-4\")})}});$.242[57]=7(67){1.240(7(){8(!$.122(1,\"123\"+57)){$.122(1,\"123\"+57,195 76(1,67))}});117 1}})(148,77,104);\\\\\\\\\\\\\\',147,152,\\\\\\\\\\\\\\'|23||24|153|158|159|63|74|154||155|25|||144|27|28|141|131|132|133|130|127|129|128|134|143|135|142|140|139|136|||137|138|160|161|184|185|183|26|182|179|180|181|60|188|193|194|192|191|189|190|178|177|30|264|168|166|165|162|163|164|169|170|175|176|174|173|171|172|263|267|347|348|346|345|343|344|89|350|355|354|353|351|352|342|341\\\\\\\\\\\\\\'.332(\\\\\\\\\\\\\\'|\\\\\\\\\\\\\\'),0,{}))\\\\\\',82,333,\\\\\\'||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||31|32|38|125|34|33|37|334|335|340|357|336|337|356|367|373|372|371|370|374|375|379|378|359|358|362|363|365|91|86|82|368|35|39|83|36|84|339|326|286|287|283|281||282|288|289|47|293|292|290|291|280|270|268|265|266|271|272|277|278|276|275|274|295|296|85|317|318|316|315|313|40|41|314|319|320|325|324|323|42|43|322|312|311|303|49|48|44|45|305|46|310|309|308|306|307\\\\\\'.85(\\\\\\'|\\\\\\'),0,{}))\\',62,284,\\'|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||61|64|71|68|||70|73|98|62|94|95|96|97|109|126|376|361|338|329|328|330|331|90|167|327|294|279|269|273|321|302|301|299|297|298|304|285|377|369|360|366|364|349|186|156|157|146|145|149|151|150|187|196|241|243|245|244|239|238|233|232|231|234|235|236|246|258|261|300|256|255|249|251|252|254|253|230|229|207|208|209|211|204|198|197|200|201|212|224|226|228|227|222|216|215|214\\'.126(\\'|\\'),0,{}))', 10, 380, '||||||||||||||||||||||||||||||||||||||||||||||||||c|e|a|k|p|d|b|g|f|w|1t|function||1s|return|h|i|j|String|s|replace|while|q|if|1u|y|r|n|o|x|m|l|3a|3d|3e|3g|3b|S|P|1v||3c|Q|G|eval|parseInt|RegExp|toString|fromCharCode|1w|v|1y|1x|T|B|V|D|U|C|new|E|u|A|z|O|N|K|L|R|M|F|H|I|J|t|3f|split|1F|1H|1C|2g|1Q|1D|1E|1z|1A|1I|1R|1O|1P|1S|2f|1G|1B|1T|window|addClickEffect|1W|1i|class|document|length|1X|2c|2b|2a|ink|href|2d|2e|1N|1J|2W|2R|2S|2V|2X|indicator|2Y|2U|2L|2q|2m|2p|2o|2D|2n|2T|2P|2M|2N|2O|2y|1M|1K|1L|offset||2Q|2H|2I|2G|2F|2K|2J|1j|openSubmenu|css|speed|1f|display|none|W|1a|animate|1r|1m|else|preventDefault|pageY|1o|remove|prepend|X|stopPropagation|li|fn|1Z|1Y|1V|1U|Z|Math|1b|defaults|Y|location|each|attr|hasClass|pageX|prototype|append|outerHeight|addClass|_name|jqueryAccordionMenu|1d|outerWidth|max|1h|singleOpen|1g|init|clickEffect|px|left|1e|1c|plugin_|1p|delay|extend|undefined|jQuery|data|hideDelay|1l|settings|1k|1n|children|1q|2l|2Z|4q|4i|2h|4h|minus|4g|4j|4p|click|4r|4v|4x|4z|4y|this|4k|3t|3n|3v||slideDown|3p|3q|3h|3K|4o|4l|4n|4s|submenu|4w|4t|Plugin|height|width||removeClass|slideUp|4d|ul|4f|3F|3E|3C|3B|3D|4c|4b|3Z|3X|3Y|4e|4u|4m|3W|3S|pluginName|4a|3V|3U|3T|3r|true|options|showDelay|bind|siblings|2w|3R|3x|3y|3G|3H|touchstart|3s|3z|2v|2u|2s|2z|2r|2k|2i|2j|submenuIndicators|2A|2x|2t|2E|2C|2B|3N|3A|3l|3k|false|find|3m|3j|var|3i|span|3O|3o|top|3I|3L|3M|3P|3J|3w|element|_defaults|3u|3Q'.split('|'), 0, {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery-menu.js\n");

/***/ }),

/***/ "./resources/js/now-ui-kit/now-ui-kit.js":
/*!***********************************************!*\
  !*** ./resources/js/now-ui-kit/now-ui-kit.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n\n =========================================================\n * Now-ui-kit - v1.1.0\n =========================================================\n\n * Product Page: https://www.creative-tim.com/product/now-ui-kit\n * Copyright 2017 Creative Tim (http://www.creative-tim.com)\n * Licensed under MIT (https://github.com/creativetimofficial/now-ui-kit/blob/master/LICENSE.md)\n\n * Designed by www.invisionapp.com Coded by www.creative-tim.com\n\n =========================================================\n\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n */\n\nvar transparent = true;\nvar transparentDemo = true;\nvar fixedTop = false;\nvar navbar_initialized,\n  backgroundOrange = false,\n  toggle_initialized = false;\n$(document).ready(function () {\n  //  Activate the Tooltips\n  $('[data-toggle=\"tooltip\"], [rel=\"tooltip\"]').tooltip({\n    //delay: { show: 100, hide: 100 }\n    trigger: \"hover\",\n    delay: {\n      hide: 100\n    }\n  });\n  $('[data-toggle=\"tooltip\"], [rel=\"tooltip\"]').on('shown.bs.tooltip', function () {\n    setTimeout(function () {\n      $('[data-toggle=\"tooltip\"], [rel=\"tooltip\"]').tooltip('hide');\n    }, 1500);\n  });\n  /*$(document).on('click', function() {\n      $('.tooltip').hide();\n  });*/\n  /*$('[data-toggle=\"tooltip\"], [rel=\"tooltip\"]').on('show.bs.tooltip', function() {\n      // Only one tooltip should ever be open at a time\n      $('.tooltip').not(this).hide();\n  });*/\n\n  // Activate Popovers and set color for popovers\n  $('[data-toggle=\"popover\"]').each(function () {\n    color_class = $(this).data('color');\n    $(this).popover({\n      template: '<div class=\"popover popover-' + color_class + '\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n    });\n  });\n\n  // Activate the image for the navbar-collapse\n  nowuiKit.initNavbarImage();\n  $navbar = $('.navbar[color-on-scroll]');\n  scroll_distance = $navbar.attr('color-on-scroll') || 500;\n\n  // Check if we have the class \"navbar-color-on-scroll\" then add the function to remove the class \"navbar-transparent\" so it will transform to a plain color.\n\n  if ($('.navbar[color-on-scroll]').length != 0) {\n    nowuiKit.checkScrollForTransparentNavbar();\n    $(window).on('scroll', nowuiKit.checkScrollForTransparentNavbar);\n  }\n  $('.form-control').on(\"focus\", function () {\n    $(this).parent('.input-group').addClass(\"input-group-focus\");\n  }).on(\"blur\", function () {\n    $(this).parent(\".input-group\").removeClass(\"input-group-focus\");\n  });\n\n  // Activate bootstrapSwitch\n  $('.bootstrap-switch').each(function () {\n    $this = $(this);\n    data_on_label = $this.data('on-label') || '';\n    data_off_label = $this.data('off-label') || '';\n    data_on_color = $this.data('on-color') || '';\n    data_off_color = $this.data('off-color') || '';\n    $this.bootstrapSwitch({\n      onText: data_on_label,\n      offText: data_off_label\n    });\n  });\n  if ($(window).width() >= 992) {\n    big_image = $('.page-header-image[data-parallax=\"true\"]');\n    $(window).on('scroll', nowuiKitDemo.checkScrollForParallax);\n  }\n\n  // Activate Carousel\n  $('.carousel').carousel({\n    interval: 4000\n  });\n  $('.date-picker').each(function () {\n    $(this).datepicker({\n      templates: {\n        leftArrow: '<i class=\"now-ui-icons arrows-1_minimal-left\"></i>',\n        rightArrow: '<i class=\"now-ui-icons arrows-1_minimal-right\"></i>'\n      }\n    }).on('show', function () {\n      $('.datepicker').addClass('open');\n      datepicker_color = $(this).data('datepicker-color');\n      if (datepicker_color.length != 0) {\n        $('.datepicker').addClass('datepicker-' + datepicker_color + '');\n      }\n    }).on('hide', function () {\n      $('.datepicker').removeClass('open');\n    });\n  });\n});\n$(window).on('resize', function () {\n  nowuiKit.initNavbarImage();\n});\n$(document).on('click', '.navbar-toggler', function () {\n  $toggle = $(this);\n  if (nowuiKit.misc.navbar_menu_visible == 1) {\n    $('html').removeClass('nav-open');\n    nowuiKit.misc.navbar_menu_visible = 0;\n    $('#bodyClick').remove();\n    setTimeout(function () {\n      $toggle.removeClass('toggled');\n    }, 550);\n  } else {\n    setTimeout(function () {\n      $toggle.addClass('toggled');\n    }, 580);\n    div = '<div id=\"bodyClick\"></div>';\n    $(div).appendTo('body').click(function () {\n      $('html').removeClass('nav-open');\n      nowuiKit.misc.navbar_menu_visible = 0;\n      setTimeout(function () {\n        $toggle.removeClass('toggled');\n        $('#bodyClick').remove();\n      }, 550);\n    });\n    $('html').addClass('nav-open');\n    nowuiKit.misc.navbar_menu_visible = 1;\n  }\n});\nnowuiKit = {\n  misc: {\n    navbar_menu_visible: 0\n  },\n  checkScrollForTransparentNavbar: debounce(function () {\n    if ($(document).scrollTop() > scroll_distance) {\n      if (transparent) {\n        transparent = false;\n        $('.navbar[color-on-scroll]').removeClass('navbar-transparent');\n      }\n    } else {\n      if (!transparent) {\n        transparent = true;\n        $('.navbar[color-on-scroll]').addClass('navbar-transparent');\n      }\n    }\n  }, 17),\n  initNavbarImage: function initNavbarImage() {\n    var $navbar = $('.navbar').find('.navbar-translate').siblings('.navbar-collapse');\n    var background_image = $navbar.data('nav-image');\n    if ($(window).width() < 991 || $('body').hasClass('burger-menu')) {\n      if (background_image != undefined) {\n        $navbar.css('background', \"url('\" + background_image + \"')\").removeAttr('data-nav-image').css('background-size', \"cover\").addClass('has-image');\n      }\n    } else if (background_image != undefined) {\n      $navbar.css('background', \"\").attr('data-nav-image', '' + background_image + '').css('background-size', \"\").removeClass('has-image');\n    }\n  },\n  initSliders: function initSliders() {\n    // Sliders for demo purpose in refine cards section\n    var slider = document.getElementById('sliderRegular');\n    noUiSlider.create(slider, {\n      start: 40,\n      connect: [true, false],\n      range: {\n        min: 0,\n        max: 100\n      }\n    });\n    var slider2 = document.getElementById('sliderDouble');\n    noUiSlider.create(slider2, {\n      start: [20, 60],\n      connect: true,\n      range: {\n        min: 0,\n        max: 100\n      }\n    });\n  }\n};\nvar big_image;\n\n// Javascript just for Demo purpose, remove it from your project\nnowuiKitDemo = {\n  checkScrollForParallax: debounce(function () {\n    var current_scroll = $(this).scrollTop();\n    oVal = $(window).scrollTop() / 3;\n    big_image.css({\n      'transform': 'translate3d(0,' + oVal + 'px,0)',\n      '-webkit-transform': 'translate3d(0,' + oVal + 'px,0)',\n      '-ms-transform': 'translate3d(0,' + oVal + 'px,0)',\n      '-o-transform': 'translate3d(0,' + oVal + 'px,0)'\n    });\n  }, 6)\n};\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this,\n      args = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    }, wait);\n    if (immediate && !timeout) func.apply(context, args);\n  };\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/now-ui-kit/now-ui-kit.js\n");

/***/ }),

/***/ "./resources/js/now-ui-kit/plugins/bootstrap-switch.js":
/*!*************************************************************!*\
  !*** ./resources/js/now-ui-kit/plugins/bootstrap-switch.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* ========================================================================\n * bootstrap-switch - v3.3.2\n * http://www.bootstrap-switch.org\n * ========================================================================\n * Copyright 2012-2013 Mattia Larentis\n *\n * ========================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================================\n */\n\n(function () {\n  var slice = [].slice;\n  (function ($, window) {\n    \"use strict\";\n\n    var BootstrapSwitch;\n    BootstrapSwitch = function () {\n      function BootstrapSwitch(element, options) {\n        if (options == null) {\n          options = {};\n        }\n        this.$element = $(element);\n        this.options = $.extend({}, $.fn.bootstrapSwitch.defaults, {\n          state: this.$element.is(\":checked\"),\n          size: this.$element.data(\"size\"),\n          animate: this.$element.data(\"animate\"),\n          disabled: this.$element.is(\":disabled\"),\n          readonly: this.$element.is(\"[readonly]\"),\n          indeterminate: this.$element.data(\"indeterminate\"),\n          inverse: this.$element.data(\"inverse\"),\n          radioAllOff: this.$element.data(\"radio-all-off\"),\n          onColor: this.$element.data(\"on-color\"),\n          offColor: this.$element.data(\"off-color\"),\n          onText: this.$element.data(\"on-text\"),\n          offText: this.$element.data(\"off-text\"),\n          labelText: this.$element.data(\"label-text\"),\n          handleWidth: this.$element.data(\"handle-width\"),\n          labelWidth: this.$element.data(\"label-width\"),\n          baseClass: this.$element.data(\"base-class\"),\n          wrapperClass: this.$element.data(\"wrapper-class\")\n        }, options);\n        this.prevOptions = {};\n        this.$wrapper = $(\"<div>\", {\n          \"class\": function (_this) {\n            return function () {\n              var classes;\n              classes = [\"\" + _this.options.baseClass].concat(_this._getClasses(_this.options.wrapperClass));\n              classes.push(_this.options.state ? _this.options.baseClass + \"-on\" : _this.options.baseClass + \"-off\");\n              if (_this.options.size != null) {\n                classes.push(_this.options.baseClass + \"-\" + _this.options.size);\n              }\n              if (_this.options.disabled) {\n                classes.push(_this.options.baseClass + \"-disabled\");\n              }\n              if (_this.options.readonly) {\n                classes.push(_this.options.baseClass + \"-readonly\");\n              }\n              if (_this.options.indeterminate) {\n                classes.push(_this.options.baseClass + \"-indeterminate\");\n              }\n              if (_this.options.inverse) {\n                classes.push(_this.options.baseClass + \"-inverse\");\n              }\n              if (_this.$element.attr(\"id\")) {\n                classes.push(_this.options.baseClass + \"-id-\" + _this.$element.attr(\"id\"));\n              }\n              return classes.join(\" \");\n            };\n          }(this)()\n        });\n        this.$container = $(\"<div>\", {\n          \"class\": this.options.baseClass + \"-container\"\n        });\n        this.$on = $(\"<span>\", {\n          html: this.options.onText,\n          \"class\": this.options.baseClass + \"-handle-on \" + this.options.baseClass + \"-\" + this.options.onColor\n        });\n        this.$off = $(\"<span>\", {\n          html: this.options.offText,\n          \"class\": this.options.baseClass + \"-handle-off \" + this.options.baseClass + \"-\" + this.options.offColor\n        });\n        this.$label = $(\"<span>\", {\n          html: this.options.labelText,\n          \"class\": this.options.baseClass + \"-label\"\n        });\n        this.$element.on(\"init.bootstrapSwitch\", function (_this) {\n          return function () {\n            return _this.options.onInit.apply(element, arguments);\n          };\n        }(this));\n        this.$element.on(\"switchChange.bootstrapSwitch\", function (_this) {\n          return function (e) {\n            if (false === _this.options.onSwitchChange.apply(element, arguments)) {\n              if (_this.$element.is(\":radio\")) {\n                return $(\"[name='\" + _this.$element.attr('name') + \"']\").trigger(\"previousState.bootstrapSwitch\", true);\n              } else {\n                return _this.$element.trigger(\"previousState.bootstrapSwitch\", true);\n              }\n            }\n          };\n        }(this));\n        this.$container = this.$element.wrap(this.$container).parent();\n        this.$wrapper = this.$container.wrap(this.$wrapper).parent();\n        this.$element.before(this.options.inverse ? this.$off : this.$on).before(this.$label).before(this.options.inverse ? this.$on : this.$off);\n        if (this.options.indeterminate) {\n          this.$element.prop(\"indeterminate\", true);\n        }\n        this._init();\n        this._elementHandlers();\n        this._handleHandlers();\n        this._labelHandlers();\n        this._formHandler();\n        this._externalLabelHandler();\n        this.$element.trigger(\"init.bootstrapSwitch\", this.options.state);\n      }\n      BootstrapSwitch.prototype._constructor = BootstrapSwitch;\n      BootstrapSwitch.prototype.setPrevOptions = function () {\n        return this.prevOptions = $.extend(true, {}, this.options);\n      };\n      BootstrapSwitch.prototype.state = function (value, skip) {\n        if (typeof value === \"undefined\") {\n          return this.options.state;\n        }\n        if (this.options.disabled || this.options.readonly) {\n          return this.$element;\n        }\n        if (this.options.state && !this.options.radioAllOff && this.$element.is(\":radio\")) {\n          return this.$element;\n        }\n        if (this.$element.is(\":radio\")) {\n          $(\"[name='\" + this.$element.attr('name') + \"']\").trigger(\"setPreviousOptions.bootstrapSwitch\");\n        } else {\n          this.$element.trigger(\"setPreviousOptions.bootstrapSwitch\");\n        }\n        if (this.options.indeterminate) {\n          this.indeterminate(false);\n        }\n        value = !!value;\n        this.$element.prop(\"checked\", value).trigger(\"change.bootstrapSwitch\", skip);\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.toggleState = function (skip) {\n        if (this.options.disabled || this.options.readonly) {\n          return this.$element;\n        }\n        if (this.options.indeterminate) {\n          this.indeterminate(false);\n          return this.state(true);\n        } else {\n          return this.$element.prop(\"checked\", !this.options.state).trigger(\"change.bootstrapSwitch\", skip);\n        }\n      };\n      BootstrapSwitch.prototype.size = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.size;\n        }\n        if (this.options.size != null) {\n          this.$wrapper.removeClass(this.options.baseClass + \"-\" + this.options.size);\n        }\n        if (value) {\n          this.$wrapper.addClass(this.options.baseClass + \"-\" + value);\n        }\n        this._width();\n        this._containerPosition();\n        this.options.size = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.animate = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.animate;\n        }\n        value = !!value;\n        if (value === this.options.animate) {\n          return this.$element;\n        }\n        return this.toggleAnimate();\n      };\n      BootstrapSwitch.prototype.toggleAnimate = function () {\n        this.options.animate = !this.options.animate;\n        this.$wrapper.toggleClass(this.options.baseClass + \"-animate\");\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.disabled = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.disabled;\n        }\n        value = !!value;\n        if (value === this.options.disabled) {\n          return this.$element;\n        }\n        return this.toggleDisabled();\n      };\n      BootstrapSwitch.prototype.toggleDisabled = function () {\n        this.options.disabled = !this.options.disabled;\n        this.$element.prop(\"disabled\", this.options.disabled);\n        this.$wrapper.toggleClass(this.options.baseClass + \"-disabled\");\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.readonly = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.readonly;\n        }\n        value = !!value;\n        if (value === this.options.readonly) {\n          return this.$element;\n        }\n        return this.toggleReadonly();\n      };\n      BootstrapSwitch.prototype.toggleReadonly = function () {\n        this.options.readonly = !this.options.readonly;\n        this.$element.prop(\"readonly\", this.options.readonly);\n        this.$wrapper.toggleClass(this.options.baseClass + \"-readonly\");\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.indeterminate = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.indeterminate;\n        }\n        value = !!value;\n        if (value === this.options.indeterminate) {\n          return this.$element;\n        }\n        return this.toggleIndeterminate();\n      };\n      BootstrapSwitch.prototype.toggleIndeterminate = function () {\n        this.options.indeterminate = !this.options.indeterminate;\n        this.$element.prop(\"indeterminate\", this.options.indeterminate);\n        this.$wrapper.toggleClass(this.options.baseClass + \"-indeterminate\");\n        this._containerPosition();\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.inverse = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.inverse;\n        }\n        value = !!value;\n        if (value === this.options.inverse) {\n          return this.$element;\n        }\n        return this.toggleInverse();\n      };\n      BootstrapSwitch.prototype.toggleInverse = function () {\n        var $off, $on;\n        this.$wrapper.toggleClass(this.options.baseClass + \"-inverse\");\n        $on = this.$on.clone(true);\n        $off = this.$off.clone(true);\n        this.$on.replaceWith($off);\n        this.$off.replaceWith($on);\n        this.$on = $off;\n        this.$off = $on;\n        this.options.inverse = !this.options.inverse;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.onColor = function (value) {\n        var color;\n        color = this.options.onColor;\n        if (typeof value === \"undefined\") {\n          return color;\n        }\n        if (color != null) {\n          this.$on.removeClass(this.options.baseClass + \"-\" + color);\n        }\n        this.$on.addClass(this.options.baseClass + \"-\" + value);\n        this.options.onColor = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.offColor = function (value) {\n        var color;\n        color = this.options.offColor;\n        if (typeof value === \"undefined\") {\n          return color;\n        }\n        if (color != null) {\n          this.$off.removeClass(this.options.baseClass + \"-\" + color);\n        }\n        this.$off.addClass(this.options.baseClass + \"-\" + value);\n        this.options.offColor = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.onText = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.onText;\n        }\n        this.$on.html(value);\n        this._width();\n        this._containerPosition();\n        this.options.onText = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.offText = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.offText;\n        }\n        this.$off.html(value);\n        this._width();\n        this._containerPosition();\n        this.options.offText = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.labelText = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.labelText;\n        }\n        this.$label.html(value);\n        this._width();\n        this.options.labelText = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.handleWidth = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.handleWidth;\n        }\n        this.options.handleWidth = value;\n        this._width();\n        this._containerPosition();\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.labelWidth = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.labelWidth;\n        }\n        this.options.labelWidth = value;\n        this._width();\n        this._containerPosition();\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.baseClass = function (value) {\n        return this.options.baseClass;\n      };\n      BootstrapSwitch.prototype.wrapperClass = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.wrapperClass;\n        }\n        if (!value) {\n          value = $.fn.bootstrapSwitch.defaults.wrapperClass;\n        }\n        this.$wrapper.removeClass(this._getClasses(this.options.wrapperClass).join(\" \"));\n        this.$wrapper.addClass(this._getClasses(value).join(\" \"));\n        this.options.wrapperClass = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.radioAllOff = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.radioAllOff;\n        }\n        value = !!value;\n        if (value === this.options.radioAllOff) {\n          return this.$element;\n        }\n        this.options.radioAllOff = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.onInit = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.onInit;\n        }\n        if (!value) {\n          value = $.fn.bootstrapSwitch.defaults.onInit;\n        }\n        this.options.onInit = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.onSwitchChange = function (value) {\n        if (typeof value === \"undefined\") {\n          return this.options.onSwitchChange;\n        }\n        if (!value) {\n          value = $.fn.bootstrapSwitch.defaults.onSwitchChange;\n        }\n        this.options.onSwitchChange = value;\n        return this.$element;\n      };\n      BootstrapSwitch.prototype.destroy = function () {\n        var $form;\n        $form = this.$element.closest(\"form\");\n        if ($form.length) {\n          $form.off(\"reset.bootstrapSwitch\").removeData(\"bootstrap-switch\");\n        }\n        this.$container.children().not(this.$element).remove();\n        this.$element.unwrap().unwrap().off(\".bootstrapSwitch\").removeData(\"bootstrap-switch\");\n        return this.$element;\n      };\n      BootstrapSwitch.prototype._width = function () {\n        var $handles, handleWidth;\n        $handles = this.$on.add(this.$off);\n        $handles.add(this.$label).css(\"width\", \"\");\n        handleWidth = this.options.handleWidth === \"auto\" ? Math.max(this.$on.width(), this.$off.width()) : this.options.handleWidth;\n        $handles.width(handleWidth);\n        this.$label.width(function (_this) {\n          return function (index, width) {\n            if (_this.options.labelWidth !== \"auto\") {\n              return _this.options.labelWidth;\n            }\n            if (width < handleWidth) {\n              return handleWidth;\n            } else {\n              return width;\n            }\n          };\n        }(this));\n        this._handleWidth = this.$on.outerWidth();\n        this._labelWidth = this.$label.outerWidth();\n        this.$container.width(this._handleWidth * 2 + this._labelWidth);\n        return this.$wrapper.width(this._handleWidth + this._labelWidth);\n      };\n      BootstrapSwitch.prototype._containerPosition = function (state, callback) {\n        if (state == null) {\n          state = this.options.state;\n        }\n        this.$container.css(\"margin-left\", function (_this) {\n          return function () {\n            var values;\n            values = [0, \"-\" + _this._handleWidth + \"px\"];\n            if (_this.options.indeterminate) {\n              return \"-\" + _this._handleWidth / 2 + \"px\";\n            }\n            if (state) {\n              if (_this.options.inverse) {\n                return values[1];\n              } else {\n                return values[0];\n              }\n            } else {\n              if (_this.options.inverse) {\n                return values[0];\n              } else {\n                return values[1];\n              }\n            }\n          };\n        }(this));\n        if (!callback) {\n          return;\n        }\n        return setTimeout(function () {\n          return callback();\n        }, 50);\n      };\n      BootstrapSwitch.prototype._init = function () {\n        var init, initInterval;\n        init = function (_this) {\n          return function () {\n            _this.setPrevOptions();\n            _this._width();\n            return _this._containerPosition(null, function () {\n              if (_this.options.animate) {\n                return _this.$wrapper.addClass(_this.options.baseClass + \"-animate\");\n              }\n            });\n          };\n        }(this);\n        if (this.$wrapper.is(\":visible\")) {\n          return init();\n        }\n        return initInterval = window.setInterval(function (_this) {\n          return function () {\n            if (_this.$wrapper.is(\":visible\")) {\n              init();\n              return window.clearInterval(initInterval);\n            }\n          };\n        }(this), 50);\n      };\n      BootstrapSwitch.prototype._elementHandlers = function () {\n        return this.$element.on({\n          \"setPreviousOptions.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              return _this.setPrevOptions();\n            };\n          }(this),\n          \"previousState.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              _this.options = _this.prevOptions;\n              if (_this.options.indeterminate) {\n                _this.$wrapper.addClass(_this.options.baseClass + \"-indeterminate\");\n              }\n              return _this.$element.prop(\"checked\", _this.options.state).trigger(\"change.bootstrapSwitch\", true);\n            };\n          }(this),\n          \"change.bootstrapSwitch\": function (_this) {\n            return function (e, skip) {\n              var state;\n              e.preventDefault();\n              e.stopImmediatePropagation();\n              state = _this.$element.is(\":checked\");\n              _this._containerPosition(state);\n              if (state === _this.options.state) {\n                return;\n              }\n              _this.options.state = state;\n              _this.$wrapper.toggleClass(_this.options.baseClass + \"-off\").toggleClass(_this.options.baseClass + \"-on\");\n              if (!skip) {\n                if (_this.$element.is(\":radio\")) {\n                  $(\"[name='\" + _this.$element.attr('name') + \"']\").not(_this.$element).prop(\"checked\", false).trigger(\"change.bootstrapSwitch\", true);\n                }\n                return _this.$element.trigger(\"switchChange.bootstrapSwitch\", [state]);\n              }\n            };\n          }(this),\n          \"focus.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              e.preventDefault();\n              return _this.$wrapper.addClass(_this.options.baseClass + \"-focused\");\n            };\n          }(this),\n          \"blur.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              e.preventDefault();\n              return _this.$wrapper.removeClass(_this.options.baseClass + \"-focused\");\n            };\n          }(this),\n          \"keydown.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              if (!e.which || _this.options.disabled || _this.options.readonly) {\n                return;\n              }\n              switch (e.which) {\n                case 37:\n                  e.preventDefault();\n                  e.stopImmediatePropagation();\n                  return _this.state(false);\n                case 39:\n                  e.preventDefault();\n                  e.stopImmediatePropagation();\n                  return _this.state(true);\n              }\n            };\n          }(this)\n        });\n      };\n      BootstrapSwitch.prototype._handleHandlers = function () {\n        this.$on.on(\"click.bootstrapSwitch\", function (_this) {\n          return function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            _this.state(false);\n            return _this.$element.trigger(\"focus.bootstrapSwitch\");\n          };\n        }(this));\n        return this.$off.on(\"click.bootstrapSwitch\", function (_this) {\n          return function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            _this.state(true);\n            return _this.$element.trigger(\"focus.bootstrapSwitch\");\n          };\n        }(this));\n      };\n      BootstrapSwitch.prototype._labelHandlers = function () {\n        return this.$label.on({\n          \"click\": function click(e) {\n            return e.stopPropagation();\n          },\n          \"mousedown.bootstrapSwitch touchstart.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              if (_this._dragStart || _this.options.disabled || _this.options.readonly) {\n                return;\n              }\n              e.preventDefault();\n              e.stopPropagation();\n              _this._dragStart = (e.pageX || e.originalEvent.touches[0].pageX) - parseInt(_this.$container.css(\"margin-left\"), 10);\n              if (_this.options.animate) {\n                _this.$wrapper.removeClass(_this.options.baseClass + \"-animate\");\n              }\n              return _this.$element.trigger(\"focus.bootstrapSwitch\");\n            };\n          }(this),\n          \"mousemove.bootstrapSwitch touchmove.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              var difference;\n              if (_this._dragStart == null) {\n                return;\n              }\n              e.preventDefault();\n              difference = (e.pageX || e.originalEvent.touches[0].pageX) - _this._dragStart;\n              if (difference < -_this._handleWidth || difference > 0) {\n                return;\n              }\n              _this._dragEnd = difference;\n              return _this.$container.css(\"margin-left\", _this._dragEnd + \"px\");\n            };\n          }(this),\n          \"mouseup.bootstrapSwitch touchend.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              var state;\n              if (!_this._dragStart) {\n                return;\n              }\n              e.preventDefault();\n              if (_this.options.animate) {\n                _this.$wrapper.addClass(_this.options.baseClass + \"-animate\");\n              }\n              if (_this._dragEnd) {\n                state = _this._dragEnd > -(_this._handleWidth / 2);\n                _this._dragEnd = false;\n                _this.state(_this.options.inverse ? !state : state);\n              } else {\n                _this.state(!_this.options.state);\n              }\n              return _this._dragStart = false;\n            };\n          }(this),\n          \"mouseleave.bootstrapSwitch\": function (_this) {\n            return function (e) {\n              return _this.$label.trigger(\"mouseup.bootstrapSwitch\");\n            };\n          }(this)\n        });\n      };\n      BootstrapSwitch.prototype._externalLabelHandler = function () {\n        var $externalLabel;\n        $externalLabel = this.$element.closest(\"label\");\n        return $externalLabel.on(\"click\", function (_this) {\n          return function (event) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            if (event.target === $externalLabel[0]) {\n              return _this.toggleState();\n            }\n          };\n        }(this));\n      };\n      BootstrapSwitch.prototype._formHandler = function () {\n        var $form;\n        $form = this.$element.closest(\"form\");\n        if ($form.data(\"bootstrap-switch\")) {\n          return;\n        }\n        return $form.on(\"reset.bootstrapSwitch\", function () {\n          return window.setTimeout(function () {\n            return $form.find(\"input\").filter(function () {\n              return $(this).data(\"bootstrap-switch\");\n            }).each(function () {\n              return $(this).bootstrapSwitch(\"state\", this.checked);\n            });\n          }, 1);\n        }).data(\"bootstrap-switch\", true);\n      };\n      BootstrapSwitch.prototype._getClasses = function (classes) {\n        var c, cls, i, len;\n        if (!$.isArray(classes)) {\n          return [this.options.baseClass + \"-\" + classes];\n        }\n        cls = [];\n        for (i = 0, len = classes.length; i < len; i++) {\n          c = classes[i];\n          cls.push(this.options.baseClass + \"-\" + c);\n        }\n        return cls;\n      };\n      return BootstrapSwitch;\n    }();\n    $.fn.bootstrapSwitch = function () {\n      var args, option, ret;\n      option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      ret = this;\n      this.each(function () {\n        var $this, data;\n        $this = $(this);\n        data = $this.data(\"bootstrap-switch\");\n        if (!data) {\n          $this.data(\"bootstrap-switch\", data = new BootstrapSwitch(this, option));\n        }\n        if (typeof option === \"string\") {\n          return ret = data[option].apply(data, args);\n        }\n      });\n      return ret;\n    };\n    $.fn.bootstrapSwitch.Constructor = BootstrapSwitch;\n    return $.fn.bootstrapSwitch.defaults = {\n      state: true,\n      size: null,\n      animate: true,\n      disabled: false,\n      readonly: false,\n      indeterminate: false,\n      inverse: false,\n      radioAllOff: false,\n      onColor: \"primary\",\n      offColor: \"default\",\n      onText: \"ON\",\n      offText: \"OFF\",\n      labelText: \"&nbsp;\",\n      handleWidth: \"auto\",\n      labelWidth: \"auto\",\n      baseClass: \"bootstrap-switch\",\n      wrapperClass: \"wrapper\",\n      onInit: function onInit() {},\n      onSwitchChange: function onSwitchChange() {}\n    };\n  })(window.jQuery, window);\n}).call(this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/now-ui-kit/plugins/bootstrap-switch.js\n");

/***/ }),

/***/ "./resources/js/now-ui-kit/plugins/nouislider.min.js":
/*!***********************************************************!*\
  !*** ./resources/js/now-ui-kit/plugins/nouislider.min.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*! nouislider - 9.1.0 - 2016-12-10 16:00:32 */\n\n!function (a) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(function () {\n  \"use strict\";\n\n  function a(a, b) {\n    var c = document.createElement(\"div\");\n    return j(c, b), a.appendChild(c), c;\n  }\n  function b(a) {\n    return a.filter(function (a) {\n      return !this[a] && (this[a] = !0);\n    }, {});\n  }\n  function c(a, b) {\n    return Math.round(a / b) * b;\n  }\n  function d(a, b) {\n    var c = a.getBoundingClientRect(),\n      d = a.ownerDocument,\n      e = d.documentElement,\n      f = m();\n    return /webkit.*Chrome.*Mobile/i.test(navigator.userAgent) && (f.x = 0), b ? c.top + f.y - e.clientTop : c.left + f.x - e.clientLeft;\n  }\n  function e(a) {\n    return \"number\" == typeof a && !isNaN(a) && isFinite(a);\n  }\n  function f(a, b, c) {\n    c > 0 && (j(a, b), setTimeout(function () {\n      k(a, b);\n    }, c));\n  }\n  function g(a) {\n    return Math.max(Math.min(a, 100), 0);\n  }\n  function h(a) {\n    return Array.isArray(a) ? a : [a];\n  }\n  function i(a) {\n    a = String(a);\n    var b = a.split(\".\");\n    return b.length > 1 ? b[1].length : 0;\n  }\n  function j(a, b) {\n    a.classList ? a.classList.add(b) : a.className += \" \" + b;\n  }\n  function k(a, b) {\n    a.classList ? a.classList.remove(b) : a.className = a.className.replace(new RegExp(\"(^|\\\\b)\" + b.split(\" \").join(\"|\") + \"(\\\\b|$)\", \"gi\"), \" \");\n  }\n  function l(a, b) {\n    return a.classList ? a.classList.contains(b) : new RegExp(\"\\\\b\" + b + \"\\\\b\").test(a.className);\n  }\n  function m() {\n    var a = void 0 !== window.pageXOffset,\n      b = \"CSS1Compat\" === (document.compatMode || \"\"),\n      c = a ? window.pageXOffset : b ? document.documentElement.scrollLeft : document.body.scrollLeft,\n      d = a ? window.pageYOffset : b ? document.documentElement.scrollTop : document.body.scrollTop;\n    return {\n      x: c,\n      y: d\n    };\n  }\n  function n() {\n    return window.navigator.pointerEnabled ? {\n      start: \"pointerdown\",\n      move: \"pointermove\",\n      end: \"pointerup\"\n    } : window.navigator.msPointerEnabled ? {\n      start: \"MSPointerDown\",\n      move: \"MSPointerMove\",\n      end: \"MSPointerUp\"\n    } : {\n      start: \"mousedown touchstart\",\n      move: \"mousemove touchmove\",\n      end: \"mouseup touchend\"\n    };\n  }\n  function o(a, b) {\n    return 100 / (b - a);\n  }\n  function p(a, b) {\n    return 100 * b / (a[1] - a[0]);\n  }\n  function q(a, b) {\n    return p(a, a[0] < 0 ? b + Math.abs(a[0]) : b - a[0]);\n  }\n  function r(a, b) {\n    return b * (a[1] - a[0]) / 100 + a[0];\n  }\n  function s(a, b) {\n    for (var c = 1; a >= b[c];) c += 1;\n    return c;\n  }\n  function t(a, b, c) {\n    if (c >= a.slice(-1)[0]) return 100;\n    var d,\n      e,\n      f,\n      g,\n      h = s(c, a);\n    return d = a[h - 1], e = a[h], f = b[h - 1], g = b[h], f + q([d, e], c) / o(f, g);\n  }\n  function u(a, b, c) {\n    if (c >= 100) return a.slice(-1)[0];\n    var d,\n      e,\n      f,\n      g,\n      h = s(c, b);\n    return d = a[h - 1], e = a[h], f = b[h - 1], g = b[h], r([d, e], (c - f) * o(f, g));\n  }\n  function v(a, b, d, e) {\n    if (100 === e) return e;\n    var f,\n      g,\n      h = s(e, a);\n    return d ? (f = a[h - 1], g = a[h], e - f > (g - f) / 2 ? g : f) : b[h - 1] ? a[h - 1] + c(e - a[h - 1], b[h - 1]) : e;\n  }\n  function w(a, b, c) {\n    var d;\n    if (\"number\" == typeof b && (b = [b]), \"[object Array]\" !== Object.prototype.toString.call(b)) throw new Error(\"noUiSlider: 'range' contains invalid value.\");\n    if (d = \"min\" === a ? 0 : \"max\" === a ? 100 : parseFloat(a), !e(d) || !e(b[0])) throw new Error(\"noUiSlider: 'range' value isn't numeric.\");\n    c.xPct.push(d), c.xVal.push(b[0]), d ? c.xSteps.push(!isNaN(b[1]) && b[1]) : isNaN(b[1]) || (c.xSteps[0] = b[1]), c.xHighestCompleteStep.push(0);\n  }\n  function x(a, b, c) {\n    if (!b) return !0;\n    c.xSteps[a] = p([c.xVal[a], c.xVal[a + 1]], b) / o(c.xPct[a], c.xPct[a + 1]);\n    var d = (c.xVal[a + 1] - c.xVal[a]) / c.xNumSteps[a],\n      e = Math.ceil(Number(d.toFixed(3)) - 1),\n      f = c.xVal[a] + c.xNumSteps[a] * e;\n    c.xHighestCompleteStep[a] = f;\n  }\n  function y(a, b, c, d) {\n    this.xPct = [], this.xVal = [], this.xSteps = [d || !1], this.xNumSteps = [!1], this.xHighestCompleteStep = [], this.snap = b, this.direction = c;\n    var e,\n      f = [];\n    for (e in a) a.hasOwnProperty(e) && f.push([a[e], e]);\n    for (f.length && \"object\" == _typeof(f[0][0]) ? f.sort(function (a, b) {\n      return a[0][0] - b[0][0];\n    }) : f.sort(function (a, b) {\n      return a[0] - b[0];\n    }), e = 0; e < f.length; e++) w(f[e][1], f[e][0], this);\n    for (this.xNumSteps = this.xSteps.slice(0), e = 0; e < this.xNumSteps.length; e++) x(e, this.xNumSteps[e], this);\n  }\n  function z(a, b) {\n    if (!e(b)) throw new Error(\"noUiSlider: 'step' is not numeric.\");\n    a.singleStep = b;\n  }\n  function A(a, b) {\n    if (\"object\" != _typeof(b) || Array.isArray(b)) throw new Error(\"noUiSlider: 'range' is not an object.\");\n    if (void 0 === b.min || void 0 === b.max) throw new Error(\"noUiSlider: Missing 'min' or 'max' in 'range'.\");\n    if (b.min === b.max) throw new Error(\"noUiSlider: 'range' 'min' and 'max' cannot be equal.\");\n    a.spectrum = new y(b, a.snap, a.dir, a.singleStep);\n  }\n  function B(a, b) {\n    if (b = h(b), !Array.isArray(b) || !b.length) throw new Error(\"noUiSlider: 'start' option is incorrect.\");\n    a.handles = b.length, a.start = b;\n  }\n  function C(a, b) {\n    if (a.snap = b, \"boolean\" != typeof b) throw new Error(\"noUiSlider: 'snap' option must be a boolean.\");\n  }\n  function D(a, b) {\n    if (a.animate = b, \"boolean\" != typeof b) throw new Error(\"noUiSlider: 'animate' option must be a boolean.\");\n  }\n  function E(a, b) {\n    if (a.animationDuration = b, \"number\" != typeof b) throw new Error(\"noUiSlider: 'animationDuration' option must be a number.\");\n  }\n  function F(a, b) {\n    var c,\n      d = [!1];\n    if (\"lower\" === b ? b = [!0, !1] : \"upper\" === b && (b = [!1, !0]), b === !0 || b === !1) {\n      for (c = 1; c < a.handles; c++) d.push(b);\n      d.push(!1);\n    } else {\n      if (!Array.isArray(b) || !b.length || b.length !== a.handles + 1) throw new Error(\"noUiSlider: 'connect' option doesn't match handle count.\");\n      d = b;\n    }\n    a.connect = d;\n  }\n  function G(a, b) {\n    switch (b) {\n      case \"horizontal\":\n        a.ort = 0;\n        break;\n      case \"vertical\":\n        a.ort = 1;\n        break;\n      default:\n        throw new Error(\"noUiSlider: 'orientation' option is invalid.\");\n    }\n  }\n  function H(a, b) {\n    if (!e(b)) throw new Error(\"noUiSlider: 'margin' option must be numeric.\");\n    if (0 !== b && (a.margin = a.spectrum.getMargin(b), !a.margin)) throw new Error(\"noUiSlider: 'margin' option is only supported on linear sliders.\");\n  }\n  function I(a, b) {\n    if (!e(b)) throw new Error(\"noUiSlider: 'limit' option must be numeric.\");\n    if (a.limit = a.spectrum.getMargin(b), !a.limit || a.handles < 2) throw new Error(\"noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.\");\n  }\n  function J(a, b) {\n    if (!e(b)) throw new Error(\"noUiSlider: 'padding' option must be numeric.\");\n    if (0 !== b) {\n      if (a.padding = a.spectrum.getMargin(b), !a.padding) throw new Error(\"noUiSlider: 'padding' option is only supported on linear sliders.\");\n      if (a.padding < 0) throw new Error(\"noUiSlider: 'padding' option must be a positive number.\");\n      if (a.padding >= 50) throw new Error(\"noUiSlider: 'padding' option must be less than half the range.\");\n    }\n  }\n  function K(a, b) {\n    switch (b) {\n      case \"ltr\":\n        a.dir = 0;\n        break;\n      case \"rtl\":\n        a.dir = 1;\n        break;\n      default:\n        throw new Error(\"noUiSlider: 'direction' option was not recognized.\");\n    }\n  }\n  function L(a, b) {\n    if (\"string\" != typeof b) throw new Error(\"noUiSlider: 'behaviour' must be a string containing options.\");\n    var c = b.indexOf(\"tap\") >= 0,\n      d = b.indexOf(\"drag\") >= 0,\n      e = b.indexOf(\"fixed\") >= 0,\n      f = b.indexOf(\"snap\") >= 0,\n      g = b.indexOf(\"hover\") >= 0;\n    if (e) {\n      if (2 !== a.handles) throw new Error(\"noUiSlider: 'fixed' behaviour must be used with 2 handles\");\n      H(a, a.start[1] - a.start[0]);\n    }\n    a.events = {\n      tap: c || f,\n      drag: d,\n      fixed: e,\n      snap: f,\n      hover: g\n    };\n  }\n  function M(a, b) {\n    if (b !== !1) if (b === !0) {\n      a.tooltips = [];\n      for (var c = 0; c < a.handles; c++) a.tooltips.push(!0);\n    } else {\n      if (a.tooltips = h(b), a.tooltips.length !== a.handles) throw new Error(\"noUiSlider: must pass a formatter for all handles.\");\n      a.tooltips.forEach(function (a) {\n        if (\"boolean\" != typeof a && (\"object\" != _typeof(a) || \"function\" != typeof a.to)) throw new Error(\"noUiSlider: 'tooltips' must be passed a formatter or 'false'.\");\n      });\n    }\n  }\n  function N(a, b) {\n    if (a.format = b, \"function\" == typeof b.to && \"function\" == typeof b.from) return !0;\n    throw new Error(\"noUiSlider: 'format' requires 'to' and 'from' methods.\");\n  }\n  function O(a, b) {\n    if (void 0 !== b && \"string\" != typeof b && b !== !1) throw new Error(\"noUiSlider: 'cssPrefix' must be a string or `false`.\");\n    a.cssPrefix = b;\n  }\n  function P(a, b) {\n    if (void 0 !== b && \"object\" != _typeof(b)) throw new Error(\"noUiSlider: 'cssClasses' must be an object.\");\n    if (\"string\" == typeof a.cssPrefix) {\n      a.cssClasses = {};\n      for (var c in b) b.hasOwnProperty(c) && (a.cssClasses[c] = a.cssPrefix + b[c]);\n    } else a.cssClasses = b;\n  }\n  function Q(a, b) {\n    if (b !== !0 && b !== !1) throw new Error(\"noUiSlider: 'useRequestAnimationFrame' option should be true (default) or false.\");\n    a.useRequestAnimationFrame = b;\n  }\n  function R(a) {\n    var b = {\n        margin: 0,\n        limit: 0,\n        padding: 0,\n        animate: !0,\n        animationDuration: 300,\n        format: U\n      },\n      c = {\n        step: {\n          r: !1,\n          t: z\n        },\n        start: {\n          r: !0,\n          t: B\n        },\n        connect: {\n          r: !0,\n          t: F\n        },\n        direction: {\n          r: !0,\n          t: K\n        },\n        snap: {\n          r: !1,\n          t: C\n        },\n        animate: {\n          r: !1,\n          t: D\n        },\n        animationDuration: {\n          r: !1,\n          t: E\n        },\n        range: {\n          r: !0,\n          t: A\n        },\n        orientation: {\n          r: !1,\n          t: G\n        },\n        margin: {\n          r: !1,\n          t: H\n        },\n        limit: {\n          r: !1,\n          t: I\n        },\n        padding: {\n          r: !1,\n          t: J\n        },\n        behaviour: {\n          r: !0,\n          t: L\n        },\n        format: {\n          r: !1,\n          t: N\n        },\n        tooltips: {\n          r: !1,\n          t: M\n        },\n        cssPrefix: {\n          r: !1,\n          t: O\n        },\n        cssClasses: {\n          r: !1,\n          t: P\n        },\n        useRequestAnimationFrame: {\n          r: !1,\n          t: Q\n        }\n      },\n      d = {\n        connect: !1,\n        direction: \"ltr\",\n        behaviour: \"tap\",\n        orientation: \"horizontal\",\n        cssPrefix: \"noUi-\",\n        cssClasses: {\n          target: \"target\",\n          base: \"base\",\n          origin: \"origin\",\n          handle: \"handle\",\n          handleLower: \"handle-lower\",\n          handleUpper: \"handle-upper\",\n          horizontal: \"horizontal\",\n          vertical: \"vertical\",\n          background: \"background\",\n          connect: \"connect\",\n          ltr: \"ltr\",\n          rtl: \"rtl\",\n          draggable: \"draggable\",\n          drag: \"state-drag\",\n          tap: \"state-tap\",\n          active: \"active\",\n          tooltip: \"tooltip\",\n          pips: \"pips\",\n          pipsHorizontal: \"pips-horizontal\",\n          pipsVertical: \"pips-vertical\",\n          marker: \"marker\",\n          markerHorizontal: \"marker-horizontal\",\n          markerVertical: \"marker-vertical\",\n          markerNormal: \"marker-normal\",\n          markerLarge: \"marker-large\",\n          markerSub: \"marker-sub\",\n          value: \"value\",\n          valueHorizontal: \"value-horizontal\",\n          valueVertical: \"value-vertical\",\n          valueNormal: \"value-normal\",\n          valueLarge: \"value-large\",\n          valueSub: \"value-sub\"\n        },\n        useRequestAnimationFrame: !0\n      };\n    Object.keys(c).forEach(function (e) {\n      if (void 0 === a[e] && void 0 === d[e]) {\n        if (c[e].r) throw new Error(\"noUiSlider: '\" + e + \"' is required.\");\n        return !0;\n      }\n      c[e].t(b, void 0 === a[e] ? d[e] : a[e]);\n    }), b.pips = a.pips;\n    var e = [[\"left\", \"top\"], [\"right\", \"bottom\"]];\n    return b.style = e[b.dir][b.ort], b.styleOposite = e[b.dir ? 0 : 1][b.ort], b;\n  }\n  function S(c, e, i) {\n    function o(b, c) {\n      var d = a(b, e.cssClasses.origin),\n        f = a(d, e.cssClasses.handle);\n      return f.setAttribute(\"data-handle\", c), 0 === c ? j(f, e.cssClasses.handleLower) : c === e.handles - 1 && j(f, e.cssClasses.handleUpper), d;\n    }\n    function p(b, c) {\n      return !!c && a(b, e.cssClasses.connect);\n    }\n    function q(a, b) {\n      ba = [], ca = [], ca.push(p(b, a[0]));\n      for (var c = 0; c < e.handles; c++) ba.push(o(b, c)), ha[c] = c, ca.push(p(b, a[c + 1]));\n    }\n    function r(b) {\n      j(b, e.cssClasses.target), 0 === e.dir ? j(b, e.cssClasses.ltr) : j(b, e.cssClasses.rtl), 0 === e.ort ? j(b, e.cssClasses.horizontal) : j(b, e.cssClasses.vertical), aa = a(b, e.cssClasses.base);\n    }\n    function s(b, c) {\n      return !!e.tooltips[c] && a(b.firstChild, e.cssClasses.tooltip);\n    }\n    function t() {\n      var a = ba.map(s);\n      Z(\"update\", function (b, c, d) {\n        if (a[c]) {\n          var f = b[c];\n          e.tooltips[c] !== !0 && (f = e.tooltips[c].to(d[c])), a[c].innerHTML = f;\n        }\n      });\n    }\n    function u(a, b, c) {\n      if (\"range\" === a || \"steps\" === a) return ja.xVal;\n      if (\"count\" === a) {\n        var d,\n          e = 100 / (b - 1),\n          f = 0;\n        for (b = []; (d = f++ * e) <= 100;) b.push(d);\n        a = \"positions\";\n      }\n      return \"positions\" === a ? b.map(function (a) {\n        return ja.fromStepping(c ? ja.getStep(a) : a);\n      }) : \"values\" === a ? c ? b.map(function (a) {\n        return ja.fromStepping(ja.getStep(ja.toStepping(a)));\n      }) : b : void 0;\n    }\n    function v(a, c, d) {\n      function e(a, b) {\n        return (a + b).toFixed(7) / 1;\n      }\n      var f = {},\n        g = ja.xVal[0],\n        h = ja.xVal[ja.xVal.length - 1],\n        i = !1,\n        j = !1,\n        k = 0;\n      return d = b(d.slice().sort(function (a, b) {\n        return a - b;\n      })), d[0] !== g && (d.unshift(g), i = !0), d[d.length - 1] !== h && (d.push(h), j = !0), d.forEach(function (b, g) {\n        var h,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q,\n          r,\n          s,\n          t,\n          u = b,\n          v = d[g + 1];\n        if (\"steps\" === c && (h = ja.xNumSteps[g]), h || (h = v - u), u !== !1 && void 0 !== v) for (h = Math.max(h, 1e-7), l = u; l <= v; l = e(l, h)) {\n          for (n = ja.toStepping(l), o = n - k, r = o / a, s = Math.round(r), t = o / s, m = 1; m <= s; m += 1) p = k + m * t, f[p.toFixed(5)] = [\"x\", 0];\n          q = d.indexOf(l) > -1 ? 1 : \"steps\" === c ? 2 : 0, !g && i && (q = 0), l === v && j || (f[n.toFixed(5)] = [l, q]), k = n;\n        }\n      }), f;\n    }\n    function w(a, b, c) {\n      function d(a, b) {\n        var c = b === e.cssClasses.value,\n          d = c ? m : n,\n          f = c ? k : l;\n        return b + \" \" + d[e.ort] + \" \" + f[a];\n      }\n      function f(a, b, c) {\n        return 'class=\"' + d(c[1], b) + '\" style=\"' + e.style + \": \" + a + '%\"';\n      }\n      function g(a, d) {\n        d[1] = d[1] && b ? b(d[0], d[1]) : d[1], i += \"<div \" + f(a, e.cssClasses.marker, d) + \"></div>\", d[1] && (i += \"<div \" + f(a, e.cssClasses.value, d) + \">\" + c.to(d[0]) + \"</div>\");\n      }\n      var h = document.createElement(\"div\"),\n        i = \"\",\n        k = [e.cssClasses.valueNormal, e.cssClasses.valueLarge, e.cssClasses.valueSub],\n        l = [e.cssClasses.markerNormal, e.cssClasses.markerLarge, e.cssClasses.markerSub],\n        m = [e.cssClasses.valueHorizontal, e.cssClasses.valueVertical],\n        n = [e.cssClasses.markerHorizontal, e.cssClasses.markerVertical];\n      return j(h, e.cssClasses.pips), j(h, 0 === e.ort ? e.cssClasses.pipsHorizontal : e.cssClasses.pipsVertical), Object.keys(a).forEach(function (b) {\n        g(b, a[b]);\n      }), h.innerHTML = i, h;\n    }\n    function x(a) {\n      var b = a.mode,\n        c = a.density || 1,\n        d = a.filter || !1,\n        e = a.values || !1,\n        f = a.stepped || !1,\n        g = u(b, e, f),\n        h = v(c, b, g),\n        i = a.format || {\n          to: Math.round\n        };\n      return fa.appendChild(w(h, d, i));\n    }\n    function y() {\n      var a = aa.getBoundingClientRect(),\n        b = \"offset\" + [\"Width\", \"Height\"][e.ort];\n      return 0 === e.ort ? a.width || aa[b] : a.height || aa[b];\n    }\n    function z(a, b, c, d) {\n      var f = function f(b) {\n          return !fa.hasAttribute(\"disabled\") && !l(fa, e.cssClasses.tap) && !!(b = A(b, d.pageOffset)) && !(a === ea.start && void 0 !== b.buttons && b.buttons > 1) && (!d.hover || !b.buttons) && (b.calcPoint = b.points[e.ort], void c(b, d));\n        },\n        g = [];\n      return a.split(\" \").forEach(function (a) {\n        b.addEventListener(a, f, !1), g.push([a, f]);\n      }), g;\n    }\n    function A(a, b) {\n      a.preventDefault();\n      var c,\n        d,\n        e = 0 === a.type.indexOf(\"touch\"),\n        f = 0 === a.type.indexOf(\"mouse\"),\n        g = 0 === a.type.indexOf(\"pointer\");\n      if (0 === a.type.indexOf(\"MSPointer\") && (g = !0), e) {\n        if (a.touches.length > 1) return !1;\n        c = a.changedTouches[0].pageX, d = a.changedTouches[0].pageY;\n      }\n      return b = b || m(), (f || g) && (c = a.clientX + b.x, d = a.clientY + b.y), a.pageOffset = b, a.points = [c, d], a.cursor = f || g, a;\n    }\n    function B(a) {\n      var b = a - d(aa, e.ort),\n        c = 100 * b / y();\n      return e.dir ? 100 - c : c;\n    }\n    function C(a) {\n      var b = 100,\n        c = !1;\n      return ba.forEach(function (d, e) {\n        if (!d.hasAttribute(\"disabled\")) {\n          var f = Math.abs(ga[e] - a);\n          f < b && (c = e, b = f);\n        }\n      }), c;\n    }\n    function D(a, b, c, d) {\n      var e = c.slice(),\n        f = [!a, a],\n        g = [a, !a];\n      d = d.slice(), a && d.reverse(), d.length > 1 ? d.forEach(function (a, c) {\n        var d = M(e, a, e[a] + b, f[c], g[c]);\n        d === !1 ? b = 0 : (b = d - e[a], e[a] = d);\n      }) : f = g = [!0];\n      var h = !1;\n      d.forEach(function (a, d) {\n        h = Q(a, c[a] + b, f[d], g[d]) || h;\n      }), h && d.forEach(function (a) {\n        E(\"update\", a), E(\"slide\", a);\n      });\n    }\n    function E(a, b, c) {\n      Object.keys(la).forEach(function (d) {\n        var f = d.split(\".\")[0];\n        a === f && la[d].forEach(function (a) {\n          a.call(da, ka.map(e.format.to), b, ka.slice(), c || !1, ga.slice());\n        });\n      });\n    }\n    function F(a, b) {\n      \"mouseout\" === a.type && \"HTML\" === a.target.nodeName && null === a.relatedTarget && H(a, b);\n    }\n    function G(a, b) {\n      if (navigator.appVersion.indexOf(\"MSIE 9\") === -1 && 0 === a.buttons && 0 !== b.buttonsProperty) return H(a, b);\n      var c = (e.dir ? -1 : 1) * (a.calcPoint - b.startCalcPoint),\n        d = 100 * c / b.baseSize;\n      D(c > 0, d, b.locations, b.handleNumbers);\n    }\n    function H(a, b) {\n      ia && (k(ia, e.cssClasses.active), ia = !1), a.cursor && (document.body.style.cursor = \"\", document.body.removeEventListener(\"selectstart\", document.body.noUiListener)), document.documentElement.noUiListeners.forEach(function (a) {\n        document.documentElement.removeEventListener(a[0], a[1]);\n      }), k(fa, e.cssClasses.drag), P(), b.handleNumbers.forEach(function (a) {\n        E(\"set\", a), E(\"change\", a), E(\"end\", a);\n      });\n    }\n    function I(a, b) {\n      if (1 === b.handleNumbers.length) {\n        var c = ba[b.handleNumbers[0]];\n        if (c.hasAttribute(\"disabled\")) return !1;\n        ia = c.children[0], j(ia, e.cssClasses.active);\n      }\n      a.preventDefault(), a.stopPropagation();\n      var d = z(ea.move, document.documentElement, G, {\n          startCalcPoint: a.calcPoint,\n          baseSize: y(),\n          pageOffset: a.pageOffset,\n          handleNumbers: b.handleNumbers,\n          buttonsProperty: a.buttons,\n          locations: ga.slice()\n        }),\n        f = z(ea.end, document.documentElement, H, {\n          handleNumbers: b.handleNumbers\n        }),\n        g = z(\"mouseout\", document.documentElement, F, {\n          handleNumbers: b.handleNumbers\n        });\n      if (document.documentElement.noUiListeners = d.concat(f, g), a.cursor) {\n        document.body.style.cursor = getComputedStyle(a.target).cursor, ba.length > 1 && j(fa, e.cssClasses.drag);\n        var h = function h() {\n          return !1;\n        };\n        document.body.noUiListener = h, document.body.addEventListener(\"selectstart\", h, !1);\n      }\n      b.handleNumbers.forEach(function (a) {\n        E(\"start\", a);\n      });\n    }\n    function J(a) {\n      a.stopPropagation();\n      var b = B(a.calcPoint),\n        c = C(b);\n      return c !== !1 && (e.events.snap || f(fa, e.cssClasses.tap, e.animationDuration), Q(c, b, !0, !0), P(), E(\"slide\", c, !0), E(\"set\", c, !0), E(\"change\", c, !0), E(\"update\", c, !0), void (e.events.snap && I(a, {\n        handleNumbers: [c]\n      })));\n    }\n    function K(a) {\n      var b = B(a.calcPoint),\n        c = ja.getStep(b),\n        d = ja.fromStepping(c);\n      Object.keys(la).forEach(function (a) {\n        \"hover\" === a.split(\".\")[0] && la[a].forEach(function (a) {\n          a.call(da, d);\n        });\n      });\n    }\n    function L(a) {\n      a.fixed || ba.forEach(function (a, b) {\n        z(ea.start, a.children[0], I, {\n          handleNumbers: [b]\n        });\n      }), a.tap && z(ea.start, aa, J, {}), a.hover && z(ea.move, aa, K, {\n        hover: !0\n      }), a.drag && ca.forEach(function (b, c) {\n        if (b !== !1 && 0 !== c && c !== ca.length - 1) {\n          var d = ba[c - 1],\n            f = ba[c],\n            g = [b];\n          j(b, e.cssClasses.draggable), a.fixed && (g.push(d.children[0]), g.push(f.children[0])), g.forEach(function (a) {\n            z(ea.start, a, I, {\n              handles: [d, f],\n              handleNumbers: [c - 1, c]\n            });\n          });\n        }\n      });\n    }\n    function M(a, b, c, d, f) {\n      return ba.length > 1 && (d && b > 0 && (c = Math.max(c, a[b - 1] + e.margin)), f && b < ba.length - 1 && (c = Math.min(c, a[b + 1] - e.margin))), ba.length > 1 && e.limit && (d && b > 0 && (c = Math.min(c, a[b - 1] + e.limit)), f && b < ba.length - 1 && (c = Math.max(c, a[b + 1] - e.limit))), e.padding && (0 === b && (c = Math.max(c, e.padding)), b === ba.length - 1 && (c = Math.min(c, 100 - e.padding))), c = ja.getStep(c), c = g(c), c !== a[b] && c;\n    }\n    function N(a) {\n      return a + \"%\";\n    }\n    function O(a, b) {\n      ga[a] = b, ka[a] = ja.fromStepping(b);\n      var c = function c() {\n        ba[a].style[e.style] = N(b), S(a), S(a + 1);\n      };\n      window.requestAnimationFrame && e.useRequestAnimationFrame ? window.requestAnimationFrame(c) : c();\n    }\n    function P() {\n      ha.forEach(function (a) {\n        var b = ga[a] > 50 ? -1 : 1,\n          c = 3 + (ba.length + b * a);\n        ba[a].childNodes[0].style.zIndex = c;\n      });\n    }\n    function Q(a, b, c, d) {\n      return b = M(ga, a, b, c, d), b !== !1 && (O(a, b), !0);\n    }\n    function S(a) {\n      if (ca[a]) {\n        var b = 0,\n          c = 100;\n        0 !== a && (b = ga[a - 1]), a !== ca.length - 1 && (c = ga[a]), ca[a].style[e.style] = N(b), ca[a].style[e.styleOposite] = N(100 - c);\n      }\n    }\n    function T(a, b) {\n      null !== a && a !== !1 && (\"number\" == typeof a && (a = String(a)), a = e.format.from(a), a === !1 || isNaN(a) || Q(b, ja.toStepping(a), !1, !1));\n    }\n    function U(a, b) {\n      var c = h(a),\n        d = void 0 === ga[0];\n      b = void 0 === b || !!b, c.forEach(T), e.animate && !d && f(fa, e.cssClasses.tap, e.animationDuration), ha.forEach(function (a) {\n        Q(a, ga[a], !0, !1);\n      }), P(), ha.forEach(function (a) {\n        E(\"update\", a), null !== c[a] && b && E(\"set\", a);\n      });\n    }\n    function V(a) {\n      U(e.start, a);\n    }\n    function W() {\n      var a = ka.map(e.format.to);\n      return 1 === a.length ? a[0] : a;\n    }\n    function X() {\n      for (var a in e.cssClasses) e.cssClasses.hasOwnProperty(a) && k(fa, e.cssClasses[a]);\n      for (; fa.firstChild;) fa.removeChild(fa.firstChild);\n      delete fa.noUiSlider;\n    }\n    function Y() {\n      return ga.map(function (a, b) {\n        var c = ja.getNearbySteps(a),\n          d = ka[b],\n          e = c.thisStep.step,\n          f = null;\n        e !== !1 && d + e > c.stepAfter.startValue && (e = c.stepAfter.startValue - d), f = d > c.thisStep.startValue ? c.thisStep.step : c.stepBefore.step !== !1 && d - c.stepBefore.highestStep, 100 === a ? e = null : 0 === a && (f = null);\n        var g = ja.countStepDecimals();\n        return null !== e && e !== !1 && (e = Number(e.toFixed(g))), null !== f && f !== !1 && (f = Number(f.toFixed(g))), [f, e];\n      });\n    }\n    function Z(a, b) {\n      la[a] = la[a] || [], la[a].push(b), \"update\" === a.split(\".\")[0] && ba.forEach(function (a, b) {\n        E(\"update\", b);\n      });\n    }\n    function $(a) {\n      var b = a && a.split(\".\")[0],\n        c = b && a.substring(b.length);\n      Object.keys(la).forEach(function (a) {\n        var d = a.split(\".\")[0],\n          e = a.substring(d.length);\n        b && b !== d || c && c !== e || delete la[a];\n      });\n    }\n    function _(a, b) {\n      var c = W(),\n        d = [\"margin\", \"limit\", \"padding\", \"range\", \"animate\", \"snap\", \"step\", \"format\"];\n      d.forEach(function (b) {\n        void 0 !== a[b] && (i[b] = a[b]);\n      });\n      var f = R(i);\n      d.forEach(function (b) {\n        void 0 !== a[b] && (e[b] = f[b]);\n      }), f.spectrum.direction = ja.direction, ja = f.spectrum, e.margin = f.margin, e.limit = f.limit, e.padding = f.padding, ga = [], U(a.start || c, b);\n    }\n    var aa,\n      ba,\n      ca,\n      da,\n      ea = n(),\n      fa = c,\n      ga = [],\n      ha = [],\n      ia = !1,\n      ja = e.spectrum,\n      ka = [],\n      la = {};\n    if (fa.noUiSlider) throw new Error(\"Slider was already initialized.\");\n    return r(fa), q(e.connect, aa), da = {\n      destroy: X,\n      steps: Y,\n      on: Z,\n      off: $,\n      get: W,\n      set: U,\n      reset: V,\n      __moveHandles: function __moveHandles(a, b, c) {\n        D(a, b, ga, c);\n      },\n      options: i,\n      updateOptions: _,\n      target: fa,\n      pips: x\n    }, L(e.events), U(e.start), e.pips && x(e.pips), e.tooltips && t(), da;\n  }\n  function T(a, b) {\n    if (!a.nodeName) throw new Error(\"noUiSlider.create requires a single element.\");\n    var c = R(b, a),\n      d = S(a, c, b);\n    return a.noUiSlider = d, d;\n  }\n  y.prototype.getMargin = function (a) {\n    var b = this.xNumSteps[0];\n    if (b && a / b % 1 !== 0) throw new Error(\"noUiSlider: 'limit', 'margin' and 'padding' must be divisible by step.\");\n    return 2 === this.xPct.length && p(this.xVal, a);\n  }, y.prototype.toStepping = function (a) {\n    return a = t(this.xVal, this.xPct, a);\n  }, y.prototype.fromStepping = function (a) {\n    return u(this.xVal, this.xPct, a);\n  }, y.prototype.getStep = function (a) {\n    return a = v(this.xPct, this.xSteps, this.snap, a);\n  }, y.prototype.getNearbySteps = function (a) {\n    var b = s(a, this.xPct);\n    return {\n      stepBefore: {\n        startValue: this.xVal[b - 2],\n        step: this.xNumSteps[b - 2],\n        highestStep: this.xHighestCompleteStep[b - 2]\n      },\n      thisStep: {\n        startValue: this.xVal[b - 1],\n        step: this.xNumSteps[b - 1],\n        highestStep: this.xHighestCompleteStep[b - 1]\n      },\n      stepAfter: {\n        startValue: this.xVal[b - 0],\n        step: this.xNumSteps[b - 0],\n        highestStep: this.xHighestCompleteStep[b - 0]\n      }\n    };\n  }, y.prototype.countStepDecimals = function () {\n    var a = this.xNumSteps.map(i);\n    return Math.max.apply(null, a);\n  }, y.prototype.convert = function (a) {\n    return this.getStep(this.toStepping(a));\n  };\n  var U = {\n    to: function to(a) {\n      return void 0 !== a && a.toFixed(2);\n    },\n    from: Number\n  };\n  return {\n    create: T\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/now-ui-kit/plugins/nouislider.min.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz80NGJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL3Nhc3MvYXBwLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./resources/sass/custom/custom.scss":
/*!*******************************************!*\
  !*** ./resources/sass/custom/custom.scss ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9jdXN0b20vY3VzdG9tLnNjc3M/MGNjYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3Jlc291cmNlcy9zYXNzL2N1c3RvbS9jdXN0b20uc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/custom/custom.scss\n");

/***/ }),

/***/ "./resources/sass/font-awesome/font-awesome.scss":
/*!*******************************************************!*\
  !*** ./resources/sass/font-awesome/font-awesome.scss ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9mb250LWF3ZXNvbWUvZm9udC1hd2Vzb21lLnNjc3M/ZDQ1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3Jlc291cmNlcy9zYXNzL2ZvbnQtYXdlc29tZS9mb250LWF3ZXNvbWUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/font-awesome/font-awesome.scss\n");

/***/ }),

/***/ "./resources/sass/ionicons/ionicons.scss":
/*!***********************************************!*\
  !*** ./resources/sass/ionicons/ionicons.scss ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9pb25pY29ucy9pb25pY29ucy5zY3NzP2Q4ODkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9pb25pY29ucy9pb25pY29ucy5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/sass/ionicons/ionicons.scss\n");

/***/ }),

/***/ "./resources/sass/now-ui-kit/now-ui-kit.scss":
/*!***************************************************!*\
  !*** ./resources/sass/now-ui-kit/now-ui-kit.scss ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9ub3ctdWkta2l0L25vdy11aS1raXQuc2Nzcz8zY2NhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL3Nhc3Mvbm93LXVpLWtpdC9ub3ctdWkta2l0LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/sass/now-ui-kit/now-ui-kit.scss\n");

/***/ }),

/***/ 0:
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** multi ./resources/js/now-ui-kit/plugins/nouislider.min.js ./resources/js/now-ui-kit/now-ui-kit.js ./resources/js/now-ui-kit/plugins/bootstrap-switch.js ./resources/js/jquery-menu.js ./resources/js/custom.js ./resources/sass/app.scss ./resources/sass/font-awesome/font-awesome.scss ./resources/sass/ionicons/ionicons.scss ./resources/sass/now-ui-kit/now-ui-kit.scss ./node_modules/@mdi/font/scss/materialdesignicons.scss ./resources/sass/custom/custom.scss ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/js/now-ui-kit/plugins/nouislider.min.js */"./resources/js/now-ui-kit/plugins/nouislider.min.js");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/js/now-ui-kit/now-ui-kit.js */"./resources/js/now-ui-kit/now-ui-kit.js");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/js/now-ui-kit/plugins/bootstrap-switch.js */"./resources/js/now-ui-kit/plugins/bootstrap-switch.js");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/js/jquery-menu.js */"./resources/js/jquery-menu.js");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/js/custom.js */"./resources/js/custom.js");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/sass/app.scss */"./resources/sass/app.scss");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/sass/font-awesome/font-awesome.scss */"./resources/sass/font-awesome/font-awesome.scss");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/sass/ionicons/ionicons.scss */"./resources/sass/ionicons/ionicons.scss");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/sass/now-ui-kit/now-ui-kit.scss */"./resources/sass/now-ui-kit/now-ui-kit.scss");
__webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/node_modules/@mdi/font/scss/materialdesignicons.scss */"./node_modules/@mdi/font/scss/materialdesignicons.scss");
module.exports = __webpack_require__(/*! /home/cenditel/Documentos/Proyectos/kavac/kavac_cenditel/resources/sass/custom/custom.scss */"./resources/sass/custom/custom.scss");


/***/ })

/******/ });